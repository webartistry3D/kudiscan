{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nKudiScan is a mobile-first expense tracking application designed for the Nigerian market, leveraging OCR technology to automate expense data extraction from receipts. Its core purpose is to provide users with efficient spending tracking, detailed financial reports, and intuitive financial management, all while supporting Naira currency and reflecting Nigerian design aesthetics. The project aims to be a leading localized solution for personal and small business finance management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nUser feedback: Confirmed the app look and feel works well, particularly appreciates the Nigerian-focused design with Naira currency formatting.\nUser color preference: Prefers dark theme with KudiScan's green color scheme and various shades of green throughout the interface.\nTypography preference: Official KudiScan font style using Montserrat for all text elements (body, UI, headlines, branding) for consistent brand identity.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript.\n- **Styling**: Tailwind CSS with shadcn/ui and Radix UI.\n- **Routing**: Wouter.\n- **State Management**: TanStack React Query for server state.\n- **Design Principles**: Mobile-first, responsive, dark theme with KudiScan green palette, consistent card-based layouts, and a professional, minimalist aesthetic using Google Fonts (Inter/Roboto, Glacial Indifference). Features include a bottom navigation bar, clear CTAs, visual workflows, and dashboard previews.\n\n## Backend Architecture\n- **Server Framework**: Express.js with TypeScript.\n- **API Design**: RESTful APIs.\n- **Storage**: In-memory, designed for future migration to persistent databases.\n- **File Handling**: Multer for receipt image uploads.\n\n## Database & Schema\n- **ORM**: Drizzle ORM with PostgreSQL dialect.\n- **Schema**: Supports expense tracking (merchant, category, amount, date, items, receipt images), user management (including subscription details), and payment processing information.\n- **Validation**: Zod schemas for runtime type validation.\n\n## Key Features\n- **Automated Expense Tracking**: OCR integration (Tesseract.js) for receipt scanning.\n- **Category Management**: Predefined and customizable expense categories with icons and color coding.\n- **Financial Reporting**: Dashboard with spending analytics, category breakdowns, and user activity.\n- **Currency Handling**: Native Nigerian Naira (₦) formatting and parsing.\n- **User & Subscription Management**: Admin dashboard for user and system administration (role-based access), comprehensive subscription system with freemium/premium tiers, scan limits, and billing management.\n- **Notifications**: Push notification capabilities, including subscription expiry alerts.\n- **Customization**: Persistent dark mode and auto-capture preferences.\n- **Payment Processing**: Integrated payment gateway for subscription management.\n\n# External Dependencies\n\n## Core Technologies\n- React\n- TypeScript\n- Vite\n- Express.js\n\n## UI/Styling Libraries\n- Radix UI\n- Tailwind CSS\n- Lucide React\n- shadcn/ui\n\n## Backend & Database\n- Drizzle ORM\n- @neondatabase/serverless (for PostgreSQL)\n- Multer\n\n## Data Management & Utilities\n- Zod\n- date-fns\n- TanStack React Query\n- React Hook Form\n\n## OCR & Image Processing\n- Tesseract.js\n\n## Payment Gateway\n- Paystack\n\n# Recent Changes & Updates\n\n## January 2025 - Category Management System Implementation\n- **Complete Category Persistence**: Implemented full CRUD operations for expense categories with PostgreSQL backend\n  - Database schema with user-specific categories and default category seeding\n  - REST API endpoints for category management (GET, POST, PUT, DELETE)\n  - Frontend with real-time data synchronization and loading states\n  - Default categories automatically created for new users (8 standard categories)\n  - Fixed API parameter order issues and added accessibility improvements\n- **Technical Improvements**: Enhanced error handling, form validation, and user experience flows\n- **Database Migration**: Successfully deployed category schema changes with automatic default population\n\n## January 2025 - Budget Limit Adjustments\n- **Increased Budget Limits**: Updated default monthly budget from ₦150,000 to ₦5,000,000 to reflect current Nigerian economic realities\n  - Monthly budget default raised to ₦5,000,000 for more realistic expense tracking\n  - Category budget defaults proportionally increased (Food: ₦120k, Transport: ₦80k, Utilities: ₦60k, Entertainment: ₦50k, Healthcare: ₦40k, Shopping: ₦30k)\n  - Dashboard budget calculations updated to match new limits\n  - Mock spending data adjusted to reflect realistic usage patterns\n- **Economic Context**: Original ₦150,000 limit was too restrictive for small businesses, professionals, and family expenses in current Nigerian market conditions\n\n## January 2025 - Landing Page Animation Improvements\n- **Expensify-Style Free-Flowing Animations**: Implemented continuous infinite scroll animations inspired by Expensify including:\n  - Pure linear animations with no interruptions or pauses (Trust: 30s, Testimonials: 60s)\n  - Hardware acceleration optimizations for smooth performance\n  - Clean, unobstructed scrolling without fade effects or hover interactions\n  - Seamless loop transitions using -50% translateX for perfect continuity\n  - Accessibility support with reduced motion preferences\n  - User-select prevention for cleaner interaction experience\n  - Transform3d optimizations for enhanced performance\n\n## January 2025 - Enhanced OCR Accuracy Implementation\n- **Advanced Image Preprocessing**: Implemented sophisticated image enhancement techniques including:\n  - Grayscale conversion with luminance-based processing for better text recognition\n  - Binary thresholding and contrast enhancement to improve character clarity\n  - Canvas-based preprocessing pipeline for optimal OCR input preparation\n- **Multi-Pass OCR Recognition**: Enhanced accuracy through multiple recognition attempts:\n  - Three-pass system with different Page Segmentation Modes (Single Block, Single Column, Auto)\n  - Confidence-based result selection choosing the best performing recognition\n  - Nigerian-specific character whitelisting including Naira symbol (₦) support\n- **Enhanced Text Parsing Algorithms**: Comprehensive Nigerian market optimizations:\n  - Extended merchant recognition database covering major Nigerian retailers, banks, and services\n  - Advanced regex patterns for Nigerian business names and corporate structures\n  - Multi-method amount extraction with context-aware total detection\n  - Improved date parsing supporting DD/MM/YYYY format common in Nigeria\n  - Smart item extraction with pattern matching for receipt line items\n  - Confidence scoring and validation for reliability assessment\n\n## MVP Market Readiness Assessment (January 2025)\n- **Current Status**: Feature-complete MVP with persistent data layer\n- **Database**: PostgreSQL fully implemented with production-ready schema\n- **Core Features Complete**: Expense tracking, category management, subscription system, admin dashboard\n- **Critical Remaining Tasks**: Receipt image storage, mobile camera integration, payment webhooks\n- **Launch Timeline**: 3-4 weeks with focused development on deployment essentials\n- **Target Market**: Nigerian SMEs, freelancers, and individual expense trackers\n- **Business Model**: Validated freemium model with Paystack integration for Nigerian market","size_bytes":7502},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"var(--font-display)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2797},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport type { Express, Request, Response, NextFunction } from \"express\";\n\nif (!process.env.SESSION_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable is required\");\n}\n\n// Configure Passport Local Strategy\npassport.use(new LocalStrategy(\n  {\n    usernameField: 'email',\n    passwordField: 'password'\n  },\n  async (email, password, done) => {\n    try {\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return done(null, false, { message: 'Invalid email or password' });\n      }\n\n      if (!user.isActive) {\n        return done(null, false, { message: 'Account is deactivated' });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return done(null, false, { message: 'Invalid email or password' });\n      }\n\n      // Don't send password to client\n      const { password: _, ...userWithoutPassword } = user;\n      return done(null, userWithoutPassword);\n    } catch (error) {\n      return done(error);\n    }\n  }\n));\n\n// Serialize user for session\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUserById(id);\n    if (user) {\n      const { password: _, ...userWithoutPassword } = user;\n      done(null, userWithoutPassword);\n    } else {\n      done(null, false);\n    }\n  } catch (error) {\n    done(error, null);\n  }\n});\n\n// Session configuration\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Setup authentication middleware\nexport function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n}\n\n// Authentication middleware\nexport function isAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n}\n\n// Admin middleware\nexport function isAdmin(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated() && (req.user as any)?.isAdmin) {\n    return next();\n  }\n  return res.status(403).json({ message: \"Admin access required\" });\n}\n\n// Get current user helper\nexport function getCurrentUser(req: Request) {\n  return req.user as any;\n}","size_bytes":3172},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertExpenseSchema, insertCategorySchema, insertFeedbackSchema, loginSchema, registerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport passport from \"passport\";\nimport { setupAuth, isAuthenticated, isAdmin, getCurrentUser } from \"./auth\";\nimport { getUserNotifications } from \"./notifications\";\n\n// Paystack configuration\nconst PAYSTACK_SECRET_KEY = process.env.PAYSTACK_SECRET_KEY;\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const { confirmPassword, ...userData } = validatedData;\n      const user = await storage.createUser(userData);\n      \n      // Auto-login after registration\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Registration successful but login failed\" });\n        }\n        const { password: _, ...userWithoutPassword } = user;\n        res.status(201).json({ user: userWithoutPassword });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    try {\n      loginSchema.parse(req.body);\n      \n      passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.login(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          res.json({ user });\n        });\n      })(req, res, next);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    try {\n      req.logout((err) => {\n        if (err) {\n          console.error(\"Logout error:\", err);\n          return res.status(500).json({ message: \"Logout failed\" });\n        }\n        // Destroy the session\n        req.session.destroy((sessionErr) => {\n          if (sessionErr) {\n            console.error(\"Session destroy error:\", sessionErr);\n          }\n          res.clearCookie('connect.sid'); // Clear session cookie\n          res.json({ message: \"Logged out successfully\" });\n        });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/user\", isAuthenticated, async (req, res) => {\n    res.json({ user: getCurrentUser(req) });\n  });\n\n  // Protected expense routes\n  app.get(\"/api/expenses\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const expenses = await storage.getExpenses(userId);\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  // Get expense by ID\n  app.get(\"/api/expenses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const expense = await storage.getExpenseById(req.params.id, userId);\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expense\" });\n    }\n  });\n\n  // Create new expense\n  app.post(\"/api/expenses\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const validatedData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(validatedData, userId);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid expense data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Update expense\n  app.patch(\"/api/expenses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const updates = insertExpenseSchema.partial().parse(req.body);\n      const expense = await storage.updateExpense(req.params.id, updates, userId);\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid expense data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update expense\" });\n    }\n  });\n\n  // Delete expense\n  app.delete(\"/api/expenses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const deleted = await storage.deleteExpense(req.params.id, userId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  // Get dashboard statistics\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const startOfWeek = new Date(now.getTime() - (now.getDay() * 24 * 60 * 60 * 1000));\n      \n      const totalExpenses = await storage.getTotalExpenses(userId);\n      const monthlyExpenses = await storage.getExpensesByDateRange(userId, startOfMonth, now);\n      const weeklyExpenses = await storage.getExpensesByDateRange(userId, startOfWeek, now);\n      const categoryTotals = await storage.getCategoryTotals(userId);\n      const recentTransactions = (await storage.getExpenses(userId)).slice(0, 10);\n      \n      const monthlyTotal = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      const weeklyTotal = weeklyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        totalExpenses,\n        monthlyTotal,\n        weeklyTotal,\n        categoryTotals,\n        receiptCount: recentTransactions.length,\n        categoryCount: Object.keys(categoryTotals).length,\n        recentTransactions: recentTransactions.slice(0, 5)\n      });\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Category management routes\n  app.get(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const categories = await storage.getCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData, userId);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.updateCategory(req.params.id, validatedData, userId);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const deleted = await storage.deleteCategory(req.params.id, userId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Upload receipt image\n  app.post(\"/api/upload-receipt\", isAuthenticated, upload.single('receipt'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Convert file to base64 data URL for OCR processing\n      const imageUrl = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;\n      \n      res.json({ imageUrl });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload image\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", isAdmin, async (req, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      const allExpenses = await storage.getAllExpenses();\n      \n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n      const activeUsers = allUsers.filter(u => u.isActive).length;\n      const newUsersThisMonth = allUsers.filter(u => \n        u.createdAt && new Date(u.createdAt) >= startOfMonth\n      ).length;\n      \n      const totalExpenses = allExpenses.reduce((sum, e) => sum + parseFloat(e.amount), 0);\n      const averageSpending = allUsers.length > 0 ? totalExpenses / allUsers.length : 0;\n\n      res.json({\n        totalUsers: allUsers.length,\n        activeUsers,\n        totalExpenses,\n        monthlyRevenue: 0, // Placeholder for actual revenue calculation\n        newUsersThisMonth,\n        averageSpending,\n      });\n    } catch (error) {\n      console.error(\"Error getting admin stats:\", error);\n      res.status(500).json({ message: \"Failed to get admin stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", isAdmin, async (req, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      const allExpenses = await storage.getAllExpenses();\n\n      const usersWithStats = allUsers.map(user => {\n        const userExpenses = allExpenses.filter(e => e.userId === user.id);\n        const totalExpenses = userExpenses.reduce((sum, e) => sum + parseFloat(e.amount), 0);\n        \n        const { password: _, ...userWithoutPassword } = user;\n        \n        return {\n          ...userWithoutPassword,\n          totalExpenses,\n          lastActivity: userExpenses.length > 0 \n            ? new Date(Math.max(...userExpenses.map(e => new Date(e.date).getTime()))).toISOString()\n            : null,\n        };\n      });\n\n      res.json(usersWithStats);\n    } catch (error) {\n      console.error(\"Error getting admin users:\", error);\n      res.status(500).json({ message: \"Failed to get users\" });\n    }\n  });\n\n  app.get(\"/api/admin/expenses\", isAdmin, async (req, res) => {\n    try {\n      const expenses = await storage.getAllExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch all expenses\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/status\", isAdmin, async (req, res) => {\n    try {\n      const { isActive } = req.body;\n      const user = await storage.updateUser(req.params.id, { isActive });\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/admin\", isAdmin, async (req, res) => {\n    try {\n      const { isAdmin: makeAdmin } = req.body;\n      const user = await storage.updateUser(req.params.id, { isAdmin: makeAdmin });\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"Admin status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating admin status:\", error);\n      res.status(500).json({ message: \"Failed to update admin status\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", isAdmin, async (req, res) => {\n    try {\n      const { isActive, isAdmin: makeAdmin } = req.body;\n      const updates: any = {};\n      \n      if (typeof isActive === 'boolean') updates.isActive = isActive;\n      if (typeof makeAdmin === 'boolean') updates.isAdmin = makeAdmin;\n      \n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", isAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Subscription management endpoints\n  app.get(\"/api/subscription/info\", isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUserById(getCurrentUser(req).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // For canceled subscriptions, show freemium plan details\n      const displayPlan = user.subscriptionStatus === \"canceled\" ? \"freemium\" : user.subscriptionPlan;\n      const displayEndDate = user.subscriptionStatus === \"canceled\" ? null : user.subscriptionEndDate;\n      const scansLimit = displayPlan === \"premium\" ? -1 : 10;\n      \n      // Check if subscription is expiring soon (within 7 days)\n      let isExpiringSoon = false;\n      if (user.subscriptionEndDate && user.subscriptionStatus === \"active\") {\n        const expiryDate = new Date(user.subscriptionEndDate);\n        const sevenDaysFromNow = new Date();\n        sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\n        isExpiringSoon = expiryDate <= sevenDaysFromNow;\n      }\n      \n      res.json({\n        subscriptionPlan: displayPlan,\n        subscriptionStatus: user.subscriptionStatus,\n        subscriptionEndDate: displayEndDate,\n        monthlyScansUsed: parseInt(user.monthlyScansUsed),\n        scansLimit: scansLimit,\n        lastScanResetDate: user.lastScanResetDate,\n        isExpiringSoon: isExpiringSoon,\n        paymentMethod: user.paystackCustomerCode ? { last4: \"1234\" } : null\n      });\n    } catch (error) {\n      console.error(\"Error fetching subscription info:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription info\" });\n    }\n  });\n\n  app.post(\"/api/subscription/create\", isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUserById(getCurrentUser(req).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!PAYSTACK_SECRET_KEY) {\n        return res.status(500).json({ message: \"Payment system not configured\" });\n      }\n\n      const { planType = 'yearly' } = req.body;\n      \n      // Set amount based on plan type\n      const amount = planType === 'monthly' ? 300000 : 2880000; // ₦3,000 or ₦28,800 in kobo\n\n      // Initialize Paystack transaction (without plan field since we don't have pre-created plans)\n      const paystackResponse = await fetch('https://api.paystack.co/transaction/initialize', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${PAYSTACK_SECRET_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: user.email,\n          amount: amount,\n          currency: 'NGN',\n          reference: `kudiscan-${user.id}-${Date.now()}`,\n          callback_url: `${req.protocol}://${req.get('host')}/subscription`,\n          metadata: {\n            user_id: user.id,\n            plan: 'premium',\n            plan_type: planType,\n            custom_fields: [\n              {\n                display_name: \"User ID\",\n                variable_name: \"user_id\", \n                value: user.id\n              },\n              {\n                display_name: \"Plan Type\",\n                variable_name: \"plan_type\", \n                value: planType\n              }\n            ]\n          }\n        })\n      });\n\n      const paystackData = await paystackResponse.json();\n\n      if (paystackData.status) {\n        res.json({ \n          checkoutUrl: paystackData.data.authorization_url,\n          reference: paystackData.data.reference,\n          message: \"Redirecting to Paystack payment...\"\n        });\n      } else {\n        throw new Error(paystackData.message || 'Paystack initialization failed');\n      }\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ message: \"Failed to create subscription\" });\n    }\n  });\n\n  app.post(\"/api/subscription/cancel\", isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUserById(getCurrentUser(req).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await storage.updateUser(getCurrentUser(req).id, {\n        subscriptionPlan: \"freemium\",\n        subscriptionStatus: \"canceled\",\n        subscriptionEndDate: null,\n        monthlyScansUsed: \"0\"\n      });\n\n      res.json({ message: \"Subscription cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error canceling subscription:\", error);\n      res.status(500).json({ message: \"Failed to cancel subscription\" });\n    }\n  });\n\n  // Check and enforce scan limits\n  // Notifications endpoint\n  app.get(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const notifications = await getUserNotifications(getCurrentUser(req).id);\n      res.json({ notifications, count: notifications.length });\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/expenses/check-limit\", isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUserById(getCurrentUser(req).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Reset monthly scans if it's a new month\n      const now = new Date();\n      const lastReset = new Date(user.lastScanResetDate);\n      const isNewMonth = now.getMonth() !== lastReset.getMonth() || now.getFullYear() !== lastReset.getFullYear();\n\n      if (isNewMonth) {\n        await storage.updateUser(getCurrentUser(req).id, {\n          monthlyScansUsed: \"0\",\n          lastScanResetDate: now\n        });\n        return res.json({ \n          canScan: true, \n          scansUsed: 0, \n          scansLimit: user.subscriptionPlan === \"premium\" ? -1 : 10,\n          message: \"Monthly scans reset\"\n        });\n      }\n\n      const scansUsed = parseInt(user.monthlyScansUsed);\n      const scansLimit = user.subscriptionPlan === \"premium\" ? -1 : 10;\n\n      if (user.subscriptionPlan === \"freemium\" && scansUsed >= 10) {\n        return res.json({ \n          canScan: false, \n          scansUsed, \n          scansLimit: 10,\n          message: \"Monthly scan limit reached. Upgrade to Premium for unlimited scans.\"\n        });\n      }\n\n      res.json({ \n        canScan: true, \n        scansUsed, \n        scansLimit,\n        message: \"Scan allowed\"\n      });\n    } catch (error) {\n      console.error(\"Error checking scan limit:\", error);\n      res.status(500).json({ message: \"Failed to check scan limit\" });\n    }\n  });\n\n  app.post(\"/api/expenses/increment-scan\", isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUserById(getCurrentUser(req).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const newScansUsed = parseInt(user.monthlyScansUsed) + 1;\n      await storage.updateUser(getCurrentUser(req).id, {\n        monthlyScansUsed: newScansUsed.toString()\n      });\n\n      res.json({ scansUsed: newScansUsed });\n    } catch (error) {\n      console.error(\"Error incrementing scan count:\", error);\n      res.status(500).json({ message: \"Failed to increment scan count\" });\n    }\n  });\n\n  // Manual subscription activation endpoint for testing\n  app.post(\"/api/subscription/activate\", isAuthenticated, async (req, res) => {\n    try {\n      const { reference } = req.body;\n      const userId = getCurrentUser(req).id;\n      \n      if (!reference) {\n        return res.status(400).json({ message: \"Reference required\" });\n      }\n\n      // Verify payment with Paystack API\n      const verifyResponse = await fetch(`https://api.paystack.co/transaction/verify/${reference}`, {\n        headers: {\n          'Authorization': `Bearer ${PAYSTACK_SECRET_KEY}`,\n        },\n      });\n\n      const verifyData = await verifyResponse.json();\n\n      if (verifyData.status && verifyData.data.status === 'success') {\n        const { amount } = verifyData.data;\n        \n        // Determine plan type based on amount\n        let planType, endDate;\n        if (amount === 300000) { // ₦3,000 monthly\n          planType = \"monthly\";\n          endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 1 month\n        } else if (amount === 2880000) { // ₦28,800 yearly\n          planType = \"yearly\";\n          endDate = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 year\n        } else {\n          return res.status(400).json({ message: \"Invalid payment amount\" });\n        }\n\n        // Update user subscription\n        await storage.updateUser(userId, {\n          subscriptionPlan: \"premium\",\n          subscriptionStatus: \"active\",\n          subscriptionEndDate: endDate,\n          monthlyScansUsed: \"0\" // Reset scans for premium user\n        });\n\n        res.json({ message: `Successfully activated ${planType} premium subscription` });\n      } else {\n        res.status(400).json({ message: \"Payment verification failed\" });\n      }\n    } catch (error) {\n      console.error(\"Error activating subscription:\", error);\n      res.status(500).json({ message: \"Failed to activate subscription\" });\n    }\n  });\n\n  // Paystack webhook handler for payment verification\n  app.post(\"/api/paystack/webhook\", async (req, res) => {\n    try {\n      const event = req.body;\n      \n      if (event.event === \"charge.success\") {\n        const { reference, customer, amount } = event.data;\n        \n        // Extract user ID from reference\n        const userIdMatch = reference.match(/kudiscan-(.+?)-\\d+/);\n        if (!userIdMatch) {\n          console.error(\"Invalid reference format:\", reference);\n          return res.status(400).json({ message: \"Invalid reference\" });\n        }\n        \n        const userId = userIdMatch[1];\n        const user = await storage.getUserById(userId);\n        \n        if (!user) {\n          console.error(\"User not found for reference:\", reference);\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Determine plan type based on amount\n        let planType, endDate;\n        if (amount === 300000) { // ₦3,000 monthly\n          planType = \"monthly\";\n          endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 1 month\n        } else if (amount === 2880000) { // ₦28,800 yearly\n          planType = \"yearly\";\n          endDate = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 year\n        } else {\n          console.error(\"Invalid payment amount:\", amount);\n          return res.status(400).json({ message: \"Invalid payment amount\" });\n        }\n\n        // Update user subscription\n        await storage.updateUser(userId, {\n          subscriptionPlan: \"premium\",\n          subscriptionStatus: \"active\",\n          subscriptionEndDate: endDate,\n          paystackCustomerCode: customer.customer_code,\n          monthlyScansUsed: \"0\" // Reset scans for premium user\n        });\n\n        console.log(`Successfully upgraded user ${userId} to Premium (${planType} plan)`);\n\n        console.log(`Successfully upgraded user ${userId} to Premium`);\n        res.status(200).json({ message: \"Webhook processed successfully\" });\n      } else {\n        res.status(200).json({ message: \"Event not handled\" });\n      }\n    } catch (error) {\n      console.error(\"Error processing Paystack webhook:\", error);\n      res.status(500).json({ message: \"Webhook processing failed\" });\n    }\n  });\n\n  // Feedback routes\n  app.post(\"/api/feedback\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const validatedData = insertFeedbackSchema.parse(req.body);\n      const feedback = await storage.createFeedback(validatedData, userId);\n      res.status(201).json(feedback);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Feedback submission error:\", error);\n      res.status(500).json({ message: \"Failed to submit feedback\" });\n    }\n  });\n\n  app.get(\"/api/feedback\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = getCurrentUser(req).id;\n      const feedback = await storage.getFeedback(userId);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Feedback fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  // Admin feedback management\n  app.get(\"/api/admin/feedback\", isAdmin, async (req, res) => {\n    try {\n      const allFeedback = await storage.getFeedback();\n      res.json(allFeedback);\n    } catch (error) {\n      console.error(\"Admin feedback fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  app.put(\"/api/admin/feedback/:id\", isAdmin, async (req, res) => {\n    try {\n      const { isResolved, adminResponse } = req.body;\n      const feedback = await storage.updateFeedbackStatus(\n        parseInt(req.params.id), \n        isResolved, \n        adminResponse\n      );\n      if (!feedback) {\n        return res.status(404).json({ message: \"Feedback not found\" });\n      }\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Admin feedback update error:\", error);\n      res.status(500).json({ message: \"Failed to update feedback\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27810},"server/storage.ts":{"content":"import { \n  type Expense, \n  type InsertExpense, \n  type User, \n  type InsertUser,\n  type Category,\n  type InsertCategory,\n  type Feedback,\n  type InsertFeedback,\n  users,\n  expenses,\n  categories,\n  feedback\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(userData: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Expense operations\n  getExpenses(userId: string): Promise<Expense[]>;\n  getExpenseById(id: string, userId: string): Promise<Expense | undefined>;\n  createExpense(expense: InsertExpense, userId: string): Promise<Expense>;\n  updateExpense(id: string, updates: Partial<InsertExpense>, userId: string): Promise<Expense | undefined>;\n  deleteExpense(id: string, userId: string): Promise<boolean>;\n  getExpensesByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Expense[]>;\n  getExpensesByCategory(userId: string, category: string): Promise<Expense[]>;\n  getTotalExpenses(userId: string): Promise<number>;\n  getCategoryTotals(userId: string): Promise<Record<string, number>>;\n  \n  // Category operations\n  getCategories(userId: string): Promise<Category[]>;\n  getCategoryById(id: string, userId: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory, userId: string): Promise<Category>;\n  updateCategory(id: string, updates: Partial<InsertCategory>, userId: string): Promise<Category | undefined>;\n  deleteCategory(id: string, userId: string): Promise<boolean>;\n  \n  // Feedback operations\n  createFeedback(feedback: InsertFeedback, userId: string): Promise<Feedback>;\n  getFeedback(userId?: string): Promise<Feedback[]>;\n  updateFeedbackStatus(id: number, isResolved: boolean, adminResponse?: string): Promise<Feedback | undefined>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getAllExpenses(): Promise<Expense[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(userData.password, 12);\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const updateData = { ...updates };\n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 12);\n    }\n    \n    const [user] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Expense operations\n  async getExpenses(userId: string): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .where(eq(expenses.userId, userId))\n      .orderBy(expenses.createdAt);\n  }\n\n  async getExpenseById(id: string, userId: string): Promise<Expense | undefined> {\n    const [expense] = await db\n      .select()\n      .from(expenses)\n      .where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n    return expense;\n  }\n\n  async createExpense(insertExpense: InsertExpense, userId: string): Promise<Expense> {\n    const [expense] = await db\n      .insert(expenses)\n      .values({\n        ...insertExpense,\n        userId,\n      })\n      .returning();\n    return expense;\n  }\n\n  async updateExpense(id: string, updates: Partial<InsertExpense>, userId: string): Promise<Expense | undefined> {\n    const [expense] = await db\n      .update(expenses)\n      .set(updates)\n      .where(and(eq(expenses.id, id), eq(expenses.userId, userId)))\n      .returning();\n    return expense;\n  }\n\n  async deleteExpense(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(expenses)\n      .where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getExpensesByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .where(\n        and(\n          eq(expenses.userId, userId),\n          gte(expenses.date, startDate),\n          lte(expenses.date, endDate)\n        )\n      );\n  }\n\n  async getExpensesByCategory(userId: string, category: string): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .where(and(eq(expenses.userId, userId), eq(expenses.category, category)));\n  }\n\n  async getTotalExpenses(userId: string): Promise<number> {\n    const userExpenses = await this.getExpenses(userId);\n    return userExpenses.reduce((total, expense) => total + parseFloat(expense.amount), 0);\n  }\n\n  async getCategoryTotals(userId: string): Promise<Record<string, number>> {\n    const userExpenses = await this.getExpenses(userId);\n    const totals: Record<string, number> = {};\n    \n    for (const expense of userExpenses) {\n      totals[expense.category] = (totals[expense.category] || 0) + parseFloat(expense.amount);\n    }\n    \n    return totals;\n  }\n\n  // Category operations\n  async getCategories(userId: string): Promise<Category[]> {\n    const userCategories = await db.select().from(categories).where(eq(categories.userId, userId));\n    \n    // If user has no categories, create default ones\n    if (userCategories.length === 0) {\n      await this.createDefaultCategories(userId);\n      return await db.select().from(categories).where(eq(categories.userId, userId));\n    }\n    \n    return userCategories;\n  }\n\n  async createDefaultCategories(userId: string): Promise<void> {\n    const defaultCategories = [\n      { name: \"Food & Dining\", icon: \"UtensilsCrossed\", color: \"#FF6B6B\", isDefault: true },\n      { name: \"Transportation\", icon: \"Car\", color: \"#4ECDC4\", isDefault: true },\n      { name: \"Utilities\", icon: \"Zap\", color: \"#45B7D1\", isDefault: true },\n      { name: \"Healthcare\", icon: \"Heart\", color: \"#96CEB4\", isDefault: true },\n      { name: \"Entertainment\", icon: \"Music\", color: \"#FFEAA7\", isDefault: true },\n      { name: \"Shopping\", icon: \"ShoppingBag\", color: \"#DDA0DD\", isDefault: true },\n      { name: \"Education\", icon: \"GraduationCap\", color: \"#98D8C8\", isDefault: true },\n      { name: \"Other\", icon: \"MoreHorizontal\", color: \"#A8E6CF\", isDefault: true }\n    ];\n\n    await db.insert(categories).values(\n      defaultCategories.map(cat => ({ ...cat, userId }))\n    );\n  }\n\n  async getCategoryById(id: string, userId: string): Promise<Category | undefined> {\n    const [category] = await db\n      .select()\n      .from(categories)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)));\n    return category;\n  }\n\n  async createCategory(category: InsertCategory, userId: string): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values({ ...category, userId })\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, updates: Partial<InsertCategory>, userId: string): Promise<Category | undefined> {\n    const [category] = await db\n      .update(categories)\n      .set(updates)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)))\n      .returning();\n    return category;\n  }\n\n  async deleteCategory(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(categories)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Feedback operations\n  async createFeedback(feedbackData: InsertFeedback, userId: string): Promise<Feedback> {\n    const [newFeedback] = await db\n      .insert(feedback)\n      .values({ ...feedbackData, userId })\n      .returning();\n    return newFeedback;\n  }\n\n  async getFeedback(userId?: string): Promise<Feedback[]> {\n    if (userId) {\n      return await db.select().from(feedback).where(eq(feedback.userId, userId)).orderBy(feedback.createdAt);\n    }\n    return await db.select().from(feedback).orderBy(feedback.createdAt);\n  }\n\n  async updateFeedbackStatus(id: number, isResolved: boolean, adminResponse?: string): Promise<Feedback | undefined> {\n    const [updatedFeedback] = await db\n      .update(feedback)\n      .set({ \n        isResolved, \n        adminResponse,\n        updatedAt: new Date()\n      })\n      .where(eq(feedback.id, id))\n      .returning();\n    return updatedFeedback;\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(users.createdAt);\n  }\n\n  async getAllExpenses(): Promise<Expense[]> {\n    return await db.select().from(expenses).orderBy(expenses.createdAt);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9427},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, uuid, boolean, index, jsonb, serial, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  password: text(\"password\").notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  subscriptionPlan: text(\"subscription_plan\").default(\"freemium\").notNull(), // 'freemium' or 'premium'\n  subscriptionStatus: text(\"subscription_status\").default(\"active\").notNull(), // 'active', 'canceled', 'past_due'\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  monthlyScansUsed: text(\"monthly_scans_used\").default(\"0\").notNull(), // Reset monthly\n  lastScanResetDate: timestamp(\"last_scan_reset_date\").defaultNow().notNull(),\n  paystackCustomerCode: text(\"paystack_customer_code\"),\n  paystackSubscriptionCode: text(\"paystack_subscription_code\"),\n  paystackSubscriptionToken: text(\"paystack_subscription_token\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Expenses table with user relationship\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  merchant: text(\"merchant\").notNull(),\n  category: text(\"category\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  notes: text(\"notes\"),\n  items: text(\"items\").array(),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Feedback table for in-app feedback collection\nexport const feedback = pgTable(\"feedback\", {\n  id: serial(\"id\").primaryKey(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // \"feature\", \"bug\", \"support\", \"general\"\n  rating: integer(\"rating\"), // 1-5 star rating\n  subject: varchar(\"subject\", { length: 200 }),\n  message: text(\"message\").notNull(),\n  page: varchar(\"page\", { length: 100 }), // which page feedback was submitted from\n  isResolved: boolean(\"is_resolved\").default(false),\n  adminResponse: text(\"admin_response\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  expenses: many(expenses),\n  categories: many(categories),\n  feedback: many(feedback),\n}));\n\nexport const categoriesRelations = relations(categories, ({ one }) => ({\n  user: one(users, {\n    fields: [categories.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  user: one(users, {\n    fields: [expenses.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const feedbackRelations = relations(feedback, ({ one }) => ({\n  user: one(users, {\n    fields: [feedback.userId],\n    references: [users.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\n","size_bytes":5641},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Bot } from \"lucide-react\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ManualEntry from \"@/pages/manual-entry\";\nimport Transactions from \"@/pages/transactions\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport Profile from \"@/pages/profile\";\nimport AdminDashboard from \"@/pages/admin\";\nimport BudgetSettings from \"@/pages/budget-settings\";\nimport PrivacySettings from \"@/pages/privacy-settings\";\nimport HelpCenter from \"@/pages/help-center\";\nimport ContactSupport from \"@/pages/contact-support\";\nimport ExpenseCategories from \"@/pages/expense-categories\";\nimport Subscription from \"@/pages/subscription\";\nimport PaystackCheckout from \"@/pages/paystack-checkout\";\n\nfunction ProtectedRoute({ component: Component, adminOnly = false }: { component: any, adminOnly?: boolean }) {\n  const { isAuthenticated, isLoading, isAdmin } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 flex items-center justify-center animate-pulse\">\n            <Bot className=\"w-16 h-16 text-primary\" />\n          </div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Landing />;\n  }\n\n  if (adminOnly && !isAdmin) {\n    return <Dashboard />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  const { isAuthenticated, isAdmin, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 flex items-center justify-center animate-pulse\">\n            <Bot className=\"w-16 h-16 text-primary\" />\n          </div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Define the home component based on user role\n  const HomeComponent = () => {\n    if (!isAuthenticated) return <Landing />;\n    return isAdmin ? <AdminDashboard /> : <Dashboard />;\n  };\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={isAuthenticated ? HomeComponent : Login} />\n      <Route path=\"/register\" component={isAuthenticated ? HomeComponent : Register} />\n      \n      {/* Protected routes */}\n      <Route path=\"/\" component={HomeComponent} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/manual-entry\" component={() => <ProtectedRoute component={ManualEntry} />} />\n      <Route path=\"/transactions\" component={() => <ProtectedRoute component={Transactions} />} />\n      <Route path=\"/reports\" component={() => <ProtectedRoute component={Reports} />} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute component={Settings} />} />\n      <Route path=\"/profile\" component={() => <ProtectedRoute component={Profile} />} />\n      <Route path=\"/budget-settings\" component={() => <ProtectedRoute component={BudgetSettings} />} />\n      <Route path=\"/privacy-settings\" component={() => <ProtectedRoute component={PrivacySettings} />} />\n      <Route path=\"/help-center\" component={() => <ProtectedRoute component={HelpCenter} />} />\n      <Route path=\"/contact-support\" component={() => <ProtectedRoute component={ContactSupport} />} />\n      <Route path=\"/expense-categories\" component={() => <ProtectedRoute component={ExpenseCategories} />} />\n      <Route path=\"/subscription\" component={() => <ProtectedRoute component={Subscription} />} />\n      <Route path=\"/checkout\" component={() => <ProtectedRoute component={PaystackCheckout} />} />\n      <Route path=\"/admin\" component={() => <ProtectedRoute component={AdminDashboard} adminOnly={true} />} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4604},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom bot pulse animation */\n@keyframes bot-pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(2);\n  }\n}\n\n.animate-bot-pulse {\n  animation: bot-pulse 2s ease-in-out infinite;\n}\n\n/* Arrow pulse animation */\n@keyframes arrow-pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(2);\n  }\n}\n\n.animate-arrow-pulse {\n  animation: arrow-pulse 2s ease-in-out infinite;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(150 48% 46%);  /* #29A378 KudiScan Green */\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(158 64% 24%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(42 92% 56%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(150 48% 46%);  /* #29A378 KudiScan Green */\n  --chart-1: hsl(150 48% 46%);  /* #29A378 KudiScan Green */\n  --chart-2: hsl(220 70% 50%);\n  --chart-3: hsl(262 83% 58%);\n  --chart-4: hsl(142 76% 36%);\n  --chart-5: hsl(343 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(150 48% 46%);  /* #29A378 KudiScan Green */\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(215 16% 47%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(150 48% 46%);  /* #29A378 KudiScan Green */\n  --font-sans: Montserrat, system-ui, sans-serif;\n  --font-display: Montserrat, system-ui, sans-serif;\n  --font-serif: Montserrat, system-ui, sans-serif;\n  --font-mono: Montserrat, system-ui, sans-serif;\n  --radius: 0.75rem;\n  \n  /* Custom KudiScan green backgrounds for light theme */\n  --primary-light: hsl(159 60% 92%);\n  --primary-medium: hsl(159 60% 88%);\n  \n  /* Process flow card background */\n  --process-card-bg: #29A378;\n}\n\n.dark {\n  --background: hsl(210 11% 15%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(210 12% 20%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(210 12% 20%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(159 60% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 12% 16%);\n  --secondary-foreground: hsl(213 31% 91%);\n  --muted: hsl(210 12% 16%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(210 12% 16%);\n  --accent-foreground: hsl(213 31% 91%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 12% 26%);\n  --input: hsl(210 12% 26%);\n  --ring: hsl(159 60% 40%);\n  --chart-1: hsl(159 60% 40%);\n  --chart-2: hsl(159 60% 50%);\n  --chart-3: hsl(159 60% 60%);\n  --chart-4: hsl(159 60% 30%);\n  --chart-5: hsl(159 60% 70%);\n  --sidebar: hsl(210 12% 20%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(159 60% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 12% 16%);\n  --sidebar-accent-foreground: hsl(215 20.2% 65.1%);\n  --sidebar-border: hsl(210 12% 26%);\n  --sidebar-ring: hsl(159 60% 40%);\n  \n  /* Custom KudiScan green backgrounds for dark theme */\n  --primary-light: hsl(159 60% 8%);\n  --primary-medium: hsl(159 60% 12%);\n  \n  /* Process flow card background */\n  --process-card-bg: #29A378;\n}\n\n\n\n/* Light mode colors (when dark mode is disabled) */\n.light {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(159 60% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(158 64% 24%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(42 92% 56%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(159 60% 40%);\n  --chart-1: hsl(159 60% 40%);\n  --chart-2: hsl(220 70% 50%);\n  --chart-3: hsl(262 83% 58%);\n  --chart-4: hsl(142 76% 36%);\n  --chart-5: hsl(343 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(159 60% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(215 16% 47%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(159 60% 40%);\n  \n  /* Custom KudiScan green backgrounds for light theme */\n  --primary-light: hsl(159 60% 92%);\n  --primary-medium: hsl(159 60% 88%);\n  \n  /* Process flow card background */\n  --process-card-bg: #29A378;\n}\n\n.dark {\n  --background: hsl(210 11% 15%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(210 12% 20%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(210 12% 20%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(159 60% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 12% 16%);\n  --secondary-foreground: hsl(213 31% 91%);\n  --muted: hsl(210 12% 16%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(210 12% 16%);\n  --accent-foreground: hsl(213 31% 91%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 12% 26%);\n  --input: hsl(210 12% 26%);\n  --ring: hsl(159 60% 40%);\n  --chart-1: hsl(159 60% 40%);\n  --chart-2: hsl(159 60% 50%);\n  --chart-3: hsl(159 60% 60%);\n  --chart-4: hsl(159 60% 30%);\n  --chart-5: hsl(159 60% 70%);\n  --sidebar: hsl(210 12% 20%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(159 60% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 12% 16%);\n  --sidebar-accent-foreground: hsl(215 20.2% 65.1%);\n  --sidebar-border: hsl(210 12% 26%);\n  --sidebar-ring: hsl(159 60% 40%);\n  \n  /* Custom KudiScan green backgrounds for dark theme */\n  --primary-light: hsl(159 60% 8%);\n  --primary-medium: hsl(159 60% 12%);\n  \n  /* Process flow card background */\n  --process-card-bg: #29A378;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Fix autocomplete styling to match input theme */\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus,\ninput:-webkit-autofill:active {\n  -webkit-box-shadow: 0 0 0 1000px hsl(214, 32%, 91%) inset !important;\n  -webkit-text-fill-color: hsl(var(--foreground)) !important;\n  background-color: hsl(214, 32%, 91%) !important;\n  background-image: none !important;\n  transition: background-color 5000s ease-in-out 0s !important;\n  color: hsl(var(--foreground)) !important;\n}\n\n/* Dark mode autocomplete fix */\n.dark input:-webkit-autofill,\n.dark input:-webkit-autofill:hover,\n.dark input:-webkit-autofill:focus,\n.dark input:-webkit-autofill:active {\n  -webkit-box-shadow: 0 0 0 1000px hsl(210, 12%, 26%) inset !important;\n  -webkit-text-fill-color: hsl(var(--foreground)) !important;\n  background-color: hsl(210, 12%, 26%) !important;\n  background-image: none !important;\n  transition: background-color 5000s ease-in-out 0s !important;\n  color: hsl(var(--foreground)) !important;\n}\n\n/* Email input specific styling to match password field */\ninput[data-testid=\"input-email\"],\ninput[data-testid=\"input-email\"]:focus {\n  background-color: hsl(214, 32%, 91%) !important;\n  color: hsl(var(--foreground)) !important;\n  border-color: hsl(var(--border)) !important;\n}\n\n.dark input[data-testid=\"input-email\"],\n.dark input[data-testid=\"input-email\"]:focus {\n  background-color: hsl(210, 12%, 26%) !important;\n  color: hsl(var(--foreground)) !important;\n  border-color: hsl(var(--border)) !important;\n}\n\n/* Email autocomplete specific overrides - Force white text */\ninput[data-testid=\"input-email\"]:-webkit-autofill,\ninput[data-testid=\"input-email\"]:-webkit-autofill:hover,\ninput[data-testid=\"input-email\"]:-webkit-autofill:focus,\ninput[data-testid=\"input-email\"]:-webkit-autofill:active {\n  background-color: hsl(214, 32%, 91%) !important;\n  color: #ffffff !important;\n  background-image: none !important;\n  -webkit-box-shadow: 0 0 0 1000px hsl(214, 32%, 91%) inset !important;\n  -webkit-text-fill-color: #ffffff !important;\n  box-shadow: none !important;\n  caret-color: #ffffff !important;\n}\n\n.dark input[data-testid=\"input-email\"]:-webkit-autofill,\n.dark input[data-testid=\"input-email\"]:-webkit-autofill:hover,\n.dark input[data-testid=\"input-email\"]:-webkit-autofill:focus,\n.dark input[data-testid=\"input-email\"]:-webkit-autofill:active {\n  background-color: hsl(210, 12%, 26%) !important;\n  color: #ffffff !important;\n  background-image: none !important;\n  -webkit-box-shadow: 0 0 0 1000px hsl(210, 12%, 26%) inset !important;\n  -webkit-text-fill-color: #ffffff !important;\n  box-shadow: none !important;\n  caret-color: #ffffff !important;\n}\n\n/* Additional override for any missed autocomplete states */\ninput[data-testid=\"input-email\"] {\n  color: #ffffff !important;\n  -webkit-text-fill-color: #ffffff !important;\n}\n\n.dark input[data-testid=\"input-email\"] {\n  color: #ffffff !important;\n  -webkit-text-fill-color: #ffffff !important;\n}\n\n@layer utilities {\n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  /* Custom KudiScan green background utilities */\n  .bg-primary-light {\n    background-color: var(--primary-light);\n  }\n  \n  .bg-primary-medium {\n    background-color: var(--primary-medium);\n  }\n  \n  .bg-process-card {\n    background-color: var(--process-card-bg);\n  }\n  \n  /* Process card flowing animations - removed since cards no longer have containers */\n  \n  /* Process icon flowing animations */\n  .process-icon-1 {\n    animation: icon-pulse-sequential 12s ease-in-out infinite;\n  }\n  \n  .process-icon-2 {\n    animation: icon-pulse-sequential 12s ease-in-out infinite;\n    animation-delay: 3s;\n  }\n  \n  .process-icon-3 {\n    animation: icon-pulse-sequential 12s ease-in-out infinite;\n    animation-delay: 6s;\n  }\n  \n  .process-icon-4 {\n    animation: icon-pulse-sequential 12s ease-in-out infinite;\n    animation-delay: 9s;\n  }\n  \n\n  \n  @keyframes icon-pulse-sequential {\n    0%, 75%, 100% {\n      transform: scale(1);\n    }\n    12.5%, 25% {\n      transform: scale(1.4);\n    }\n  }\n  \n  .animate-scroll {\n    animation: scroll 20s linear infinite;\n  }\n  \n  @keyframes scroll {\n    0% {\n      transform: translateX(0);\n    }\n    100% {\n      transform: translateX(-50%);\n    }\n  }\n  \n  @keyframes slide-left-to-right {\n    0% {\n      transform: translateX(0);\n    }\n    100% {\n      transform: translateX(-50%);\n    }\n  }\n\n  .animate-slide-left-to-right {\n    animation: slide-left-to-right 20s linear infinite;\n  }\n}\n","size_bytes":11051},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Set dark mode immediately on app load\ndocument.documentElement.classList.add('dark');\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":247},"client/src/components/bottom-navigation.tsx":{"content":"import { Home, List, BarChart3, Settings, Shield, Users, Edit3 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst userNavItems = [\n  { path: \"/\", label: \"Home\", icon: Home },\n  { path: \"/manual-entry\", label: \"Add\", icon: Edit3 },\n  { path: \"/transactions\", label: \"History\", icon: List },\n  { path: \"/reports\", label: \"Reports\", icon: BarChart3 },\n  { path: \"/settings\", label: \"Settings\", icon: Settings },\n];\n\nconst adminNavItems = [\n  { path: \"/\", label: \"Admin\", icon: Shield },\n  { path: \"/dashboard\", label: \"Dashboard\", icon: Home },\n  { path: \"/transactions\", label: \"Transactions\", icon: List },\n  { path: \"/settings\", label: \"Settings\", icon: Settings },\n];\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n  const { isAdmin } = useAuth();\n  \n  const navItems = isAdmin ? adminNavItems : userNavItems;\n\n  return (\n    <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md lg:max-w-6xl bg-background border-t border-border px-4 py-2\">\n      <div className=\"flex justify-around lg:justify-center lg:gap-8 items-center\">\n        {navItems.map((item) => {\n          const IconComponent = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link \n              key={item.path} \n              href={item.path}\n              className={`flex flex-col items-center py-2 px-3 lg:px-4 transition-colors ${\n                isActive ? 'text-primary' : 'text-muted-foreground hover:text-primary'\n              }`} \n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <IconComponent className=\"w-5 h-5 lg:w-6 lg:h-6 mb-1\" />\n              <span className=\"text-xs lg:text-sm font-medium\">{item.label}</span>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1918},"client/src/components/camera-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { X, Zap, Camera } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface CameraModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCapture: (file: File) => void;\n}\n\nexport function CameraModal({ isOpen, onClose, onCapture }: CameraModalProps) {\n  const [flashOn, setFlashOn] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  if (!isOpen) return null;\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      onCapture(file);\n    }\n  };\n\n  const handleCameraCapture = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-90 z-50\">\n      <div className=\"flex flex-col h-full\">\n        {/* Camera Header */}\n        <div className=\"flex items-center justify-between p-4 text-white\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onClose} \n            className=\"text-white hover:bg-white/10\"\n            data-testid=\"button-close-camera\"\n          >\n            <X className=\"w-6 h-6\" />\n          </Button>\n          <h2 className=\"text-lg font-semibold\">Scan Receipt</h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={() => setFlashOn(!flashOn)}\n            className={`text-white hover:bg-white/10 ${flashOn ? 'bg-white/20' : ''}`}\n            data-testid=\"button-toggle-flash\"\n          >\n            <Zap className=\"w-6 h-6\" />\n          </Button>\n        </div>\n\n        {/* Camera Viewfinder */}\n        <div className=\"flex-1 relative overflow-hidden\">\n          <div className=\"w-full h-full bg-gray-800 flex items-center justify-center\">\n            <Card className=\"w-80 h-96 border-2 border-dashed border-white bg-transparent\">\n              <CardContent className=\"flex items-center justify-center h-full text-center text-white\">\n                <div>\n                  <Camera className=\"w-12 h-12 mb-4 mx-auto opacity-50\" />\n                  <p className=\"text-sm opacity-75\">Position receipt within frame</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Capture Guides */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-96\">\n              <div className=\"absolute top-0 left-0 w-6 h-6 border-t-2 border-l-2 border-white\"></div>\n              <div className=\"absolute top-0 right-0 w-6 h-6 border-t-2 border-r-2 border-white\"></div>\n              <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-2 border-l-2 border-white\"></div>\n              <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-2 border-r-2 border-white\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Camera Controls */}\n        <div className=\"p-6 bg-black/50\">\n          <div className=\"flex items-center justify-center space-x-8\">\n            <Button\n              onClick={handleCameraCapture}\n              className=\"w-16 h-16 bg-white text-gray-800 rounded-full hover:bg-gray-100\"\n              data-testid=\"button-capture-receipt\"\n            >\n              <Camera className=\"w-6 h-6\" />\n            </Button>\n          </div>\n          <p className=\"text-white text-center text-sm mt-4 opacity-75\">\n            Ensure receipt is flat and well-lit for best results\n          </p>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"environment\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            data-testid=\"input-file-receipt\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3914},"client/src/components/category-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { getCategoryColors, getCategoryIcon, getCategoryById } from \"@/lib/categories\";\nimport { formatNaira } from \"@/lib/currency\";\n\ninterface CategoryChartProps {\n  categoryTotals: Record<string, number>;\n}\n\nexport function CategoryChart({ categoryTotals }: CategoryChartProps) {\n  const maxAmount = Math.max(...Object.values(categoryTotals));\n  \n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-lg text-foreground\">Spending by Category</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {Object.entries(categoryTotals).map(([categoryId, amount]) => {\n          const { color, bgColor } = getCategoryColors(categoryId);\n          const icon = getCategoryIcon(categoryId);\n          const category = getCategoryById(categoryId);\n          const percentage = maxAmount > 0 ? (amount / maxAmount) * 100 : 0;\n          \n          return (\n            <div key={categoryId} className=\"flex items-center justify-between\" data-testid={`category-${categoryId}`}>\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 ${bgColor} rounded-lg flex items-center justify-center`}>\n                  <i className={`${icon} ${color} text-sm`} />\n                </div>\n                <span className=\"font-medium text-foreground\">{category?.name || categoryId}</span>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-foreground\" data-testid={`amount-${categoryId}`}>\n                  {formatNaira(amount)}\n                </p>\n                <div className=\"w-20 h-2 bg-muted rounded-full mt-1\">\n                  <div \n                    className={`h-full ${color.replace('text-', 'bg-').replace('-600', '-500')} rounded-full transition-all`}\n                    style={{ width: `${percentage}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2113},"client/src/components/expense-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { getCategoryColors, getCategoryIcon } from \"@/lib/categories\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { format } from \"date-fns\";\nimport { type Expense } from \"@shared/schema\";\n\ninterface ExpenseCardProps {\n  expense: Expense;\n}\n\nexport function ExpenseCard({ expense }: ExpenseCardProps) {\n  const { color, bgColor } = getCategoryColors(expense.category);\n  const icon = getCategoryIcon(expense.category);\n  \n  return (\n    <Card className=\"shadow-sm\" data-testid={`expense-card-${expense.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-10 h-10 ${bgColor} rounded-full flex items-center justify-center`}>\n              <i className={`${icon} ${color} text-sm`} />\n            </div>\n            <div>\n              <p className=\"font-medium text-foreground\" data-testid={`text-merchant-${expense.id}`}>\n                {expense.merchant}\n              </p>\n              <p className=\"text-sm text-muted-foreground capitalize\" data-testid={`text-category-${expense.id}`}>\n                {expense.category}\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid={`text-date-${expense.id}`}>\n                {format(new Date(expense.date), 'MMM dd, yyyy')}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"font-semibold text-foreground\" data-testid={`text-amount-${expense.id}`}>\n              {formatNaira(expense.amount)}\n            </p>\n            <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1821},"client/src/components/header.tsx":{"content":"import { Bell, User, Bot } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface HeaderProps {\n  title?: string;\n}\n\nexport function Header({ title = \"KudiScan\" }: HeaderProps) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  const { data: notifications } = useQuery({\n    queryKey: ['/api/notifications'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const handleNotifications = () => {\n    setShowNotifications(!showNotifications);\n  };\n\n  const handleNotificationClick = (actionLink?: string) => {\n    if (actionLink) {\n      setLocation(actionLink);\n      setShowNotifications(false);\n    }\n  };\n\n  const handleProfile = () => {\n    setLocation(\"/profile\");\n  };\n\n  return (\n    <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n      <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n        <div className=\"flex items-center space-x-3\">\n          <Bot className=\"w-8 h-8 lg:w-10 lg:h-10 text-primary\" />\n          <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\" data-testid=\"header-title\">\n            {title}\n          </h1>\n        </div>\n        <div className=\"flex items-center space-x-3 relative\">\n          <div className=\"relative\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"text-muted-foreground hover:text-foreground w-10 h-10 lg:w-12 lg:h-12 relative\"\n              onClick={handleNotifications}\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"w-5 h-5 lg:w-6 lg:h-6\" />\n              {notifications?.count > 0 && (\n                <Badge \n                  className=\"absolute -top-1 -right-1 w-5 h-5 text-xs flex items-center justify-center p-0 bg-red-500 hover:bg-red-500\"\n                  variant=\"destructive\"\n                >\n                  {notifications.count > 9 ? '9+' : notifications.count}\n                </Badge>\n              )}\n            </Button>\n            \n            {/* Notifications Dropdown */}\n            {showNotifications && (\n              <div className=\"absolute right-0 top-12 w-80 max-h-96 overflow-y-auto z-50\">\n                <Card className=\"shadow-lg border\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold text-sm\">Notifications</h3>\n                      {notifications?.count > 0 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {notifications.count}\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    {notifications?.notifications?.length > 0 ? (\n                      <div className=\"space-y-2\">\n                        {notifications.notifications.map((notification: any) => (\n                          <div\n                            key={notification.id}\n                            className=\"p-3 rounded-lg bg-accent/50 hover:bg-accent cursor-pointer transition-colors\"\n                            onClick={() => handleNotificationClick(notification.actionLink)}\n                          >\n                            <div className=\"flex items-start justify-between gap-2\">\n                              <div className=\"flex-1 min-w-0\">\n                                <p className=\"font-medium text-sm text-foreground mb-1\">\n                                  {notification.title}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground mb-2\">\n                                  {notification.message}\n                                </p>\n                                {notification.actionText && (\n                                  <p className=\"text-xs text-primary font-medium\">\n                                    {notification.actionText} →\n                                  </p>\n                                )}\n                              </div>\n                              <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-1\" />\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground text-center py-4\">\n                        No new notifications\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n          \n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"w-10 h-10 lg:w-12 lg:h-12 rounded-full bg-muted hover:bg-accent\"\n            onClick={handleProfile}\n            data-testid=\"button-profile\"\n          >\n            <User className=\"w-4 h-4 lg:w-5 lg:h-5 text-muted-foreground\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Overlay to close notifications when clicking outside */}\n      {showNotifications && (\n        <div \n          className=\"fixed inset-0 z-40\" \n          onClick={() => setShowNotifications(false)}\n        />\n      )}\n    </header>\n  );\n}\n","size_bytes":5649},"client/src/components/processing-modal.tsx":{"content":"import { X, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\ninterface ProcessingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  progress: number;\n  imageUrl?: string;\n}\n\nexport function ProcessingModal({ isOpen, onClose, progress, imageUrl }: ProcessingModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-background z-50\">\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Processing Receipt</h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-cancel-processing\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          {/* Receipt Preview */}\n          {imageUrl && (\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <img \n                  src={imageUrl} \n                  alt=\"Receipt being processed\" \n                  className=\"w-full h-48 object-contain rounded\"\n                  data-testid=\"img-receipt-preview\"\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Processing Status */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n                <Check className=\"text-white w-3 h-3\" />\n              </div>\n              <span className=\"text-foreground\">Image captured successfully</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                {progress < 100 ? (\n                  <div className=\"animate-spin w-3 h-3 border-2 border-white border-t-transparent rounded-full\" />\n                ) : (\n                  <Check className=\"text-white w-3 h-3\" />\n                )}\n              </div>\n              <span className=\"text-foreground\">\n                {progress < 50 ? 'Extracting text with OCR...' : \n                 progress < 100 ? 'Processing receipt data...' :\n                 'Text extraction complete'}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-6 h-6 rounded-full flex items-center justify-center ${\n                progress >= 100 ? 'bg-green-500' : 'bg-muted'\n              }`}>\n                {progress >= 100 ? (\n                  <Check className=\"text-white w-3 h-3\" />\n                ) : (\n                  <div className=\"w-3 h-3 border-2 border-muted-foreground rounded-full\" />\n                )}\n              </div>\n              <span className={progress >= 100 ? 'text-foreground' : 'text-muted-foreground'}>\n                Categorizing expenses\n              </span>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mt-8\">\n            <div className=\"w-full h-2 bg-muted rounded-full overflow-hidden\">\n              <div \n                className=\"h-full bg-primary rounded-full transition-all duration-1000\"\n                style={{ width: `${progress}%` }}\n                data-testid=\"progress-processing\"\n              />\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n              Processing... {progress}% complete\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3870},"client/src/components/results-modal.tsx":{"content":"import { useState } from \"react\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { EXPENSE_CATEGORIES } from \"@/lib/categories\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { type OCRResult } from \"@/lib/ocr\";\n\ninterface ResultsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (data: { category: string; notes: string }) => void;\n  ocrResult: OCRResult | null;\n}\n\nexport function ResultsModal({ isOpen, onClose, onSave, ocrResult }: ResultsModalProps) {\n  const [selectedCategory, setSelectedCategory] = useState('groceries');\n  const [notes, setNotes] = useState('');\n\n  if (!isOpen || !ocrResult) return null;\n\n  const handleSave = () => {\n    onSave({ category: selectedCategory, notes });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background z-50\">\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Review & Save</h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-close-results\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4\">\n          {/* Extracted Data */}\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-base\">Extracted Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Merchant:</span>\n                <span className=\"font-medium\" data-testid=\"text-extracted-merchant\">\n                  {ocrResult.merchant}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Date:</span>\n                <span className=\"font-medium\" data-testid=\"text-extracted-date\">\n                  {ocrResult.date}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Total Amount:</span>\n                <span className=\"font-semibold text-lg text-primary\" data-testid=\"text-extracted-amount\">\n                  {formatNaira(ocrResult.amount)}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Items List */}\n          {ocrResult.items.length > 0 && (\n            <Card className=\"mb-4\">\n              <CardHeader>\n                <CardTitle className=\"text-base\">Items</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\" data-testid=\"items-list\">\n                  {ocrResult.items.map((item, index) => (\n                    <div key={index} className=\"text-sm text-gray-700\" data-testid={`item-${index}`}>\n                      {item}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Category Selection */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Category\n            </label>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger data-testid=\"select-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {EXPENSE_CATEGORIES.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Notes */}\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Notes (Optional)\n            </label>\n            <Textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Add any additional notes about this expense...\"\n              rows={3}\n              data-testid=\"textarea-notes\"\n            />\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"p-4 border-t bg-white space-y-3\">\n          <Button \n            onClick={handleSave}\n            className=\"w-full bg-primary text-white hover:bg-primary/90\"\n            data-testid=\"button-save-expense\"\n          >\n            Save Expense\n          </Button>\n          <Button \n            onClick={onClose}\n            variant=\"outline\" \n            className=\"w-full\"\n            data-testid=\"button-retake-picture\"\n          >\n            Retake Picture\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5269},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: user, isLoading, error } = useQuery<{ user: User } | null>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    queryFn: async (): Promise<{ user: User } | null> => {\n      const response = await fetch('/api/auth/user', {\n        credentials: 'include',\n      });\n      if (response.status === 401) {\n        return null;\n      }\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return { user: data.user };\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('/api/auth/logout', 'POST');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully.\"\n      });\n      setLocation(\"/login\");\n    },\n    onError: () => {\n      // Force logout even if API call fails\n      queryClient.clear();\n      setLocation(\"/login\");\n    }\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user: user?.user,\n    isLoading,\n    isAuthenticated: !!user?.user && !error,\n    isAdmin: user?.user?.isAdmin || false,\n    logout,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}","size_bytes":1846},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-settings.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface Settings {\n  pushNotifications: boolean;\n  darkMode: boolean;\n  autoCapture: boolean;\n}\n\nconst DEFAULT_SETTINGS: Settings = {\n  pushNotifications: false,\n  darkMode: true,\n  autoCapture: true,\n};\n\nexport function useSettings() {\n  const [settings, setSettings] = useState<Settings>(DEFAULT_SETTINGS);\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem('kudiscan-settings');\n    if (saved) {\n      try {\n        setSettings(JSON.parse(saved));\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n  }, []);\n\n  // Save settings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('kudiscan-settings', JSON.stringify(settings));\n  }, [settings]);\n\n  // Apply dark mode class to document\n  useEffect(() => {\n    if (settings.darkMode) {\n      document.documentElement.classList.add('dark');\n      document.documentElement.classList.remove('light');\n    } else {\n      document.documentElement.classList.remove('dark');\n      document.documentElement.classList.add('light');\n    }\n  }, [settings.darkMode]);\n\n  const updateSetting = <K extends keyof Settings>(key: K, value: Settings[K]) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const togglePushNotifications = async () => {\n    const newValue = !settings.pushNotifications;\n    \n    // If enabling notifications, check for browser support and request permission\n    if (newValue && 'Notification' in window) {\n      try {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          updateSetting('pushNotifications', true);\n          return true;\n        } else {\n          updateSetting('pushNotifications', false);\n          return false;\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        updateSetting('pushNotifications', false);\n        return false;\n      }\n    } else if (!newValue) {\n      // Disabling notifications\n      updateSetting('pushNotifications', false);\n      return true;\n    } else {\n      // Browser doesn't support notifications\n      updateSetting('pushNotifications', false);\n      return false;\n    }\n  };\n\n  const toggleDarkMode = () => {\n    updateSetting('darkMode', !settings.darkMode);\n  };\n\n  const toggleAutoCapture = () => {\n    updateSetting('autoCapture', !settings.autoCapture);\n  };\n\n  return {\n    settings,\n    togglePushNotifications,\n    toggleDarkMode,\n    toggleAutoCapture,\n  };\n}","size_bytes":2613},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/categories.ts":{"content":"export interface ExpenseCategory {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n  bgColor: string;\n}\n\nexport const EXPENSE_CATEGORIES: ExpenseCategory[] = [\n  {\n    id: 'groceries',\n    name: 'Groceries',\n    icon: 'fas fa-shopping-cart',\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-100'\n  },\n  {\n    id: 'transport',\n    name: 'Transport',\n    icon: 'fas fa-gas-pump',\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-100'\n  },\n  {\n    id: 'food',\n    name: 'Food & Dining',\n    icon: 'fas fa-utensils',\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-100'\n  },\n  {\n    id: 'healthcare',\n    name: 'Healthcare',\n    icon: 'fas fa-pills',\n    color: 'text-green-600',\n    bgColor: 'bg-green-100'\n  },\n  {\n    id: 'utilities',\n    name: 'Utilities',\n    icon: 'fas fa-bolt',\n    color: 'text-yellow-600',\n    bgColor: 'bg-yellow-100'\n  },\n  {\n    id: 'entertainment',\n    name: 'Entertainment',\n    icon: 'fas fa-film',\n    color: 'text-pink-600',\n    bgColor: 'bg-pink-100'\n  },\n  {\n    id: 'education',\n    name: 'Education',\n    icon: 'fas fa-graduation-cap',\n    color: 'text-indigo-600',\n    bgColor: 'bg-indigo-100'\n  },\n  {\n    id: 'other',\n    name: 'Other',\n    icon: 'fas fa-tag',\n    color: 'text-gray-600',\n    bgColor: 'bg-gray-100'\n  }\n];\n\nexport function getCategoryById(id: string): ExpenseCategory | undefined {\n  return EXPENSE_CATEGORIES.find(category => category.id === id);\n}\n\nexport function getCategoryIcon(categoryId: string): string {\n  const category = getCategoryById(categoryId);\n  return category?.icon || 'fas fa-tag';\n}\n\nexport function getCategoryColors(categoryId: string): { color: string; bgColor: string } {\n  const category = getCategoryById(categoryId);\n  return {\n    color: category?.color || 'text-gray-600',\n    bgColor: category?.bgColor || 'bg-gray-100'\n  };\n}\n","size_bytes":1839},"client/src/lib/currency.ts":{"content":"export function formatNaira(amount: number | string): string {\n  const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numericAmount)) return '₦0.00';\n  \n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    currencyDisplay: 'symbol'\n  }).format(numericAmount).replace('NGN', '₦');\n}\n\nexport function parseAmount(value: string): number {\n  // Remove currency symbols and commas, then parse\n  const cleaned = value.replace(/[₦,\\s]/g, '');\n  return parseFloat(cleaned) || 0;\n}\n","size_bytes":558},"client/src/lib/ocr.ts":{"content":"import Tesseract from 'tesseract.js';\n\nexport interface OCRResult {\n  merchant: string;\n  amount: number;\n  date: string;\n  items: string[];\n  confidence: number;\n  rawText: string;\n}\n\n// Enhanced image preprocessing for better OCR accuracy\nasync function preprocessImage(imageFile: File): Promise<HTMLCanvasElement> {\n  return new Promise((resolve) => {\n    const img = new Image();\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    \n    img.onload = () => {\n      // Set canvas size to image dimensions\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Draw original image\n      ctx.drawImage(img, 0, 0);\n      \n      // Get image data for processing\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const data = imageData.data;\n      \n      // Apply image enhancement techniques\n      for (let i = 0; i < data.length; i += 4) {\n        // Convert to grayscale using luminance formula\n        const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n        \n        // Apply contrast enhancement and thresholding\n        const enhanced = gray > 128 ? 255 : 0; // Binary threshold\n        \n        data[i] = enhanced;     // Red\n        data[i + 1] = enhanced; // Green\n        data[i + 2] = enhanced; // Blue\n        // Alpha stays the same\n      }\n      \n      // Put processed image data back\n      ctx.putImageData(imageData, 0, 0);\n      resolve(canvas);\n    };\n    \n    img.src = URL.createObjectURL(imageFile);\n  });\n}\n\nexport async function processReceipt(imageFile: File): Promise<OCRResult> {\n  try {\n    console.log('Starting enhanced OCR processing...');\n    \n    // Preprocess image for better accuracy\n    const processedCanvas = await preprocessImage(imageFile);\n    \n    // Convert canvas to blob for Tesseract\n    const processedBlob = await new Promise<Blob>((resolve) => {\n      processedCanvas.toBlob((blob) => resolve(blob!), 'image/png');\n    });\n    \n    // Advanced Tesseract configuration for Nigerian receipts\n    const ocrOptions: any = {\n      logger: (m: any) => console.log(`OCR Progress: ${m.status} (${Math.round(m.progress * 100)}%)`),\n      tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,!@#$%^&*()_+-=[]{}|;:\\'\",<.>?/₦ ',\n      preserve_interword_spaces: '1',\n      tessedit_create_hocr: '1',\n      tessedit_create_tsv: '1',\n    };\n    \n    // Multi-pass OCR with different PSM modes for maximum accuracy\n    console.log('Running multi-pass OCR recognition...');\n    \n    const results = await Promise.all([\n      // Pass 1: Single block mode (best for receipts)\n      Tesseract.recognize(processedBlob, 'eng', {\n        ...ocrOptions,\n        tessedit_pageseg_mode: 6, // PSM.SINGLE_BLOCK\n      }),\n      // Pass 2: Single column mode\n      Tesseract.recognize(processedBlob, 'eng', {\n        ...ocrOptions,\n        tessedit_pageseg_mode: 4, // PSM.SINGLE_COLUMN\n      }),\n      // Pass 3: Auto mode with original image\n      Tesseract.recognize(imageFile, 'eng', {\n        ...ocrOptions,\n        tessedit_pageseg_mode: 3, // PSM.AUTO\n      }),\n    ]);\n    \n    // Select best result based on confidence\n    const bestResult = results.reduce((best, current) => \n      current.data.confidence > best.data.confidence ? current : best\n    );\n    \n    console.log(`Best OCR confidence: ${bestResult.data.confidence}%`);\n    \n    const text = bestResult.data.text;\n    const parsedResult = parseReceiptText(text, bestResult.data.confidence);\n    \n    return {\n      ...parsedResult,\n      rawText: text,\n    };\n  } catch (error) {\n    console.error('Enhanced OCR processing failed:', error);\n    throw new Error('Failed to process receipt image with enhanced OCR');\n  }\n}\n\nfunction parseReceiptText(text: string, confidence: number): Omit<OCRResult, 'rawText'> {\n  console.log('Parsing receipt text with enhanced algorithms...');\n  \n  // Clean and normalize text\n  const normalizedText = text\n    .replace(/[^\\w\\s₦.,\\-\\/:()\\[\\]]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n    \n  const lines = normalizedText.split('\\n').filter(line => line.trim().length > 0);\n  \n  // Extract merchant with improved algorithm\n  const merchant = extractMerchantAdvanced(lines, normalizedText);\n  \n  // Extract total amount with multiple methods\n  const amount = extractAmountAdvanced(normalizedText, lines);\n  \n  // Extract date with better patterns\n  const date = extractDateAdvanced(normalizedText);\n  \n  // Extract items with enhanced filtering\n  const items = extractItemsAdvanced(lines);\n  \n  console.log(`Extracted: Merchant=\"${merchant}\", Amount=${amount}, Date=\"${date}\", Items=${items.length}`);\n  \n  return {\n    merchant: merchant || 'Unknown Merchant',\n    amount: amount || 0,\n    date: date || new Date().toISOString().split('T')[0],\n    items: items,\n    confidence: Math.round(confidence)\n  };\n}\n\nfunction extractMerchantAdvanced(lines: string[], fullText: string): string {\n  // Comprehensive Nigerian store and business patterns\n  const nigerianStores = [\n    'shoprite', 'spar', 'game stores', 'next cash', 'justrite', 'hubmart',\n    'ebeano', 'addide', 'prince ebeano', 'park n shop', 'konga', 'jumia',\n    'slot systems', 'computer village', 'ikeja city mall', 'palms shopping',\n    'silverbird galleria', 'cedar mall', 'jabi lake mall', 'shoprite lagos',\n    'circle mall', 'adeniran ogunsanya', 'maryland mall', 'ikota shopping',\n    'gtbank', 'access bank', 'first bank', 'zenith bank', 'uba', 'fidelity bank',\n    'dominos pizza', 'kfc', 'mr biggs', 'chicken republic', 'sweet sensation',\n    'tantalizers', 'genesis deluxe', 'film house', 'oando', 'mobil', 'total',\n    'conoil', 'forte oil', 'rainoil', 'nipco'\n  ];\n  \n  const businessPatterns = [\n    /^[A-Z][A-Z\\s&]+(?:ltd|limited|plc|inc|corp)/i,\n    /^[A-Z]+\\s+(?:stores?|shop|mart|mall|plaza|centre|center)/i,\n    /^[A-Z]{2,}\\s+[A-Z]{2,}/,\n    /^.{3,25}(?:\\s+(?:nigeria|lagos|abuja|port\\s+harcourt|kano|ibadan))?$/i\n  ];\n  \n  // First, check for exact Nigerian store matches\n  for (const line of lines.slice(0, 8)) {\n    const cleanLine = line.toLowerCase().trim();\n    for (const store of nigerianStores) {\n      if (cleanLine.includes(store)) {\n        return line.trim();\n      }\n    }\n  }\n  \n  // Then check for business name patterns\n  for (const line of lines.slice(0, 6)) {\n    const cleanLine = line.trim();\n    if (cleanLine.length < 3 || cleanLine.length > 50) continue;\n    \n    for (const pattern of businessPatterns) {\n      if (pattern.test(cleanLine)) {\n        return cleanLine;\n      }\n    }\n  }\n  \n  // Look for lines with mostly capital letters (common in business names)\n  for (const line of lines.slice(0, 5)) {\n    const cleanLine = line.trim();\n    if (cleanLine.length >= 3 && cleanLine.length <= 35) {\n      const capitalRatio = (cleanLine.match(/[A-Z]/g) || []).length / cleanLine.replace(/\\s/g, '').length;\n      if (capitalRatio > 0.6) {\n        return cleanLine;\n      }\n    }\n  }\n  \n  // Fallback to first meaningful line\n  for (const line of lines.slice(0, 3)) {\n    const cleanLine = line.trim();\n    if (cleanLine.length > 3 && /[a-zA-Z]/.test(cleanLine) && !/^\\d+$/.test(cleanLine)) {\n      return cleanLine;\n    }\n  }\n  \n  return lines[0]?.trim() || 'Unknown Merchant';\n}\n\nfunction extractAmountAdvanced(text: string, lines: string[]): number {\n  console.log('Extracting amount with advanced patterns...');\n  \n  // Enhanced patterns for Nigerian receipts\n  const totalPatterns = [\n    /(?:total|grand\\s+total|amount\\s+due|net\\s+total)[:\\s]*₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n    /(?:amount|sum|balance)[:\\s]*₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n    /₦\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/g,\n    /(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)[\\s]*₦/g,\n    /total[\\s:]*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n    /(?:pay|payment)[\\s:]*₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i\n  ];\n  \n  const amounts: number[] = [];\n  \n  // Method 1: Pattern matching on full text\n  for (const pattern of totalPatterns) {\n    const matches = Array.from(text.matchAll(new RegExp(pattern.source, pattern.flags + 'g')));\n    for (const match of matches) {\n      const numberStr = match[1];\n      if (numberStr) {\n        const amount = parseFloat(numberStr.replace(/,/g, ''));\n        if (!isNaN(amount) && amount > 0 && amount < 1000000) { // Reasonable range\n          amounts.push(amount);\n        }\n      }\n    }\n  }\n  \n  // Method 2: Look for \"TOTAL\" lines specifically\n  for (const line of lines) {\n    const cleanLine = line.toLowerCase().trim();\n    if (cleanLine.includes('total') && !cleanLine.includes('subtotal')) {\n      const numberMatch = line.match(/(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/);\n      if (numberMatch) {\n        const amount = parseFloat(numberMatch[1].replace(/,/g, ''));\n        if (!isNaN(amount) && amount > 0) {\n          amounts.push(amount);\n        }\n      }\n    }\n  }\n  \n  // Method 3: Look for last significant amount (often the total)\n  for (let i = lines.length - 1; i >= 0; i--) {\n    const line = lines[i];\n    const numberMatch = line.match(/₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/);\n    if (numberMatch) {\n      const amount = parseFloat(numberMatch[1].replace(/,/g, ''));\n      if (!isNaN(amount) && amount >= 100) { // Minimum reasonable receipt amount\n        amounts.push(amount);\n        break;\n      }\n    }\n  }\n  \n  // Return the most likely total (usually the largest amount)\n  if (amounts.length === 0) return 0;\n  \n  // If we have multiple amounts, prefer ones that appear with \"total\" keywords\n  const sortedAmounts = amounts.sort((a, b) => b - a);\n  console.log(`Found amounts: [${sortedAmounts.join(', ')}]`);\n  \n  return sortedAmounts[0];\n}\n\nfunction extractDateAdvanced(text: string): string {\n  console.log('Extracting date with enhanced patterns...');\n  \n  // Enhanced date patterns for Nigerian receipts\n  const datePatterns = [\n    // DD/MM/YYYY or DD-MM-YYYY\n    /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/g,\n    // DD/MM/YY or DD-MM-YY  \n    /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2})/g,\n    // Month name patterns: DD MMM YYYY or DD MMMM YYYY\n    /(\\d{1,2})[\\s\\-\\/](jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[\\s\\-\\/](\\d{2,4})/gi,\n    // Time stamps with dates: DD/MM/YYYY HH:MM\n    /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2,4})\\s+\\d{1,2}:\\d{2}/g,\n    // YYYY/MM/DD format\n    /(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})/g,\n    // Date: DD/MM/YYYY pattern\n    /date[:\\s]+(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2,4})/gi,\n  ];\n  \n  const currentYear = new Date().getFullYear();\n  \n  for (const pattern of datePatterns) {\n    const matches = Array.from(text.matchAll(pattern));\n    for (const match of matches) {\n      try {\n        let dateStr = match[0];\n        \n        // Clean up the date string\n        dateStr = dateStr.replace(/^date[:\\s]+/i, '');\n        \n        // Handle different date formats\n        let parsedDate: Date;\n        \n        if (match[2] && isNaN(parseInt(match[2]))) {\n          // Month name format\n          parsedDate = new Date(dateStr);\n        } else {\n          // Numeric format - assume DD/MM/YYYY for Nigerian context\n          const day = parseInt(match[1]);\n          const month = parseInt(match[2]);\n          let year = parseInt(match[3]);\n          \n          // Handle 2-digit years\n          if (year < 100) {\n            year += year < 50 ? 2000 : 1900;\n          }\n          \n          // Validate ranges\n          if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && \n              year >= currentYear - 5 && year <= currentYear + 1) {\n            parsedDate = new Date(year, month - 1, day);\n          } else {\n            continue;\n          }\n        }\n        \n        // Validate the parsed date\n        if (!isNaN(parsedDate.getTime()) && parsedDate.getFullYear() >= currentYear - 5) {\n          const formattedDate = parsedDate.toISOString().split('T')[0];\n          console.log(`Extracted date: ${formattedDate}`);\n          return formattedDate;\n        }\n      } catch (e) {\n        console.log(`Failed to parse date: ${match[0]}`);\n        continue;\n      }\n    }\n  }\n  \n  console.log('No valid date found, using current date');\n  return new Date().toISOString().split('T')[0];\n}\n\nfunction extractItemsAdvanced(lines: string[]): string[] {\n  console.log('Extracting items with enhanced filtering...');\n  \n  const items: string[] = [];\n  const skipPatterns = [\n    /^(total|subtotal|tax|vat|discount|change|payment|cash|card|balance|amount)/i,\n    /^(receipt|invoice|bill|store|shop|mall|address|phone|email|website)/i,\n    /^(date|time|cashier|server|thank\\s+you|visit\\s+again)/i,\n    /^(ref|reference|transaction|trans|receipt\\s*#)/i,\n    /^\\d{1,3}$/, // Single numbers (likely quantity)\n    /^₦?\\s*\\d+[.,]\\d{2}\\s*$/, // Just prices\n    /^[^\\w]*$/, // Only symbols/spaces\n    /^\\s*[-=*_]{3,}\\s*$/, // Separator lines\n  ];\n  \n  const itemPatterns = [\n    // Item with quantity and price: \"2 x Coca Cola 500ml ₦200\"\n    /^(\\d+\\s*x?\\s*)?([a-zA-Z][a-zA-Z0-9\\s\\-_&\\/]{2,30})\\s+₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n    // Item with price: \"Bread ₦150.00\"\n    /^([a-zA-Z][a-zA-Z0-9\\s\\-_&\\/]{2,30})\\s+₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n    // Simple item with price at end: \"Coca Cola 200.00\"\n    /^([a-zA-Z][a-zA-Z0-9\\s\\-_&\\/]{2,30})\\s+(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)\\s*$/i,\n    // Price at start: \"₦200 Bread\"\n    /^₦?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)\\s+([a-zA-Z][a-zA-Z0-9\\s\\-_&\\/]{2,30})/i\n  ];\n  \n  for (const line of lines) {\n    const cleanLine = line.trim();\n    \n    // Skip if line is too short or too long\n    if (cleanLine.length < 3 || cleanLine.length > 80) continue;\n    \n    // Skip lines matching exclusion patterns\n    let shouldSkip = false;\n    for (const skipPattern of skipPatterns) {\n      if (skipPattern.test(cleanLine)) {\n        shouldSkip = true;\n        break;\n      }\n    }\n    if (shouldSkip) continue;\n    \n    // Check if line matches item patterns\n    let matchedItem = '';\n    for (const itemPattern of itemPatterns) {\n      const match = cleanLine.match(itemPattern);\n      if (match) {\n        // Extract the item name (not the price part)\n        if (match[2]) {\n          matchedItem = match[2].trim();\n        } else if (match[1] && /[a-zA-Z]/.test(match[1])) {\n          matchedItem = match[1].trim();\n        }\n        break;\n      }\n    }\n    \n    if (matchedItem && matchedItem.length >= 3) {\n      items.push(cleanLine); // Store the full line for context\n    } else {\n      // Fallback: if line has letters and reasonable length, might be an item\n      if (/[a-zA-Z]{3,}/.test(cleanLine) && \n          !(/^\\d+$/.test(cleanLine)) && \n          cleanLine.split(' ').length <= 8) {\n        // Additional validation: check if it's not obviously metadata\n        const lowerLine = cleanLine.toLowerCase();\n        if (!lowerLine.includes('customer') && \n            !lowerLine.includes('service') &&\n            !lowerLine.includes('welcome') &&\n            !lowerLine.includes('location')) {\n          items.push(cleanLine);\n        }\n      }\n    }\n  }\n  \n  console.log(`Extracted ${items.length} items`);\n  \n  // Remove duplicates and limit to reasonable number\n  const uniqueItems = Array.from(new Set(items));\n  return uniqueItems.slice(0, 15); // Increased limit for better item capture\n}\n","size_bytes":15227},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Banknote, \n  TrendingUp, \n  Activity, \n  Search,\n  UserCheck,\n  UserX,\n  Crown,\n  Calendar,\n  FileText,\n  BarChart3,\n  Settings,\n  Shield,\n  AlertTriangle\n} from \"lucide-react\";\n\ninterface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalExpenses: number;\n  monthlyRevenue: number;\n  newUsersThisMonth: number;\n  averageSpending: number;\n}\n\ninterface UserData {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  createdAt: string;\n  totalExpenses: number;\n  lastActivity?: string;\n}\n\nexport default function Admin() {\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [userSearchTerm, setUserSearchTerm] = useState(\"\");\n  const [userFilterStatus, setUserFilterStatus] = useState<\"all\" | \"active\" | \"inactive\">(\"all\");\n  const { toast } = useToast();\n\n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const { data: adminStats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery<UserData[]>({\n    queryKey: ['/api/admin/users'],\n  });\n\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      return await apiRequest(`/api/admin/users/${userId}/status`, 'PATCH', { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleAdminStatusMutation = useMutation({\n    mutationFn: async ({ userId, isAdmin }: { userId: string; isAdmin: boolean }) => {\n      return await apiRequest(`/api/admin/users/${userId}/admin`, 'PATCH', { isAdmin });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({\n        title: \"Success\",\n        description: \"Admin status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update admin status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = users?.filter(user => {\n    const matchesSearch = \n      user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n      `${user.firstName || ''} ${user.lastName || ''}`.toLowerCase().includes(userSearchTerm.toLowerCase());\n    \n    const matchesStatus = \n      userFilterStatus === \"all\" || \n      (userFilterStatus === \"active\" && user.isActive) ||\n      (userFilterStatus === \"inactive\" && !user.isActive);\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  if (statsLoading) {\n    return (\n      <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n        <Header title=\"Admin Dashboard\" />\n        <div className=\"p-4 space-y-6\">\n          <div className=\"animate-pulse\">\n            {/* Stats Cards Grid */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n            \n            {/* User Management Section */}\n            <div className=\"space-y-4\">\n              <div className=\"h-6 bg-muted rounded w-32\"></div>\n              <div className=\"h-12 bg-muted rounded-lg\"></div>\n              <div className=\"space-y-2\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded-lg\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen overflow-x-hidden\">\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n            Admin Dashboard\n          </h1>\n        </div>\n      </header>\n      \n      <main className=\"pb-20 pt-4\">\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full mx-auto\">\n          <div className=\"px-4 mb-4\">\n            <TabsList className=\"grid w-full grid-cols-3 bg-card border border-border\">\n              <TabsTrigger value=\"overview\" className=\"text-xs data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\">Overview</TabsTrigger>\n              <TabsTrigger value=\"users\" className=\"text-xs data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\">Users</TabsTrigger>\n              <TabsTrigger value=\"reports\" className=\"text-xs data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\">Reports</TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"overview\" className=\"px-4 space-y-4 max-w-full\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4 w-full max-w-full\">\n              <Card>\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 min-w-0 pr-2\">\n                      <p className=\"text-xs text-muted-foreground\">Total Users</p>\n                      <p className=\"text-lg font-bold\" data-testid=\"text-total-users\">\n                        {adminStats?.totalUsers || 0}\n                      </p>\n                    </div>\n                    <Users className=\"w-6 h-6 text-primary flex-shrink-0\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 min-w-0 pr-2\">\n                      <p className=\"text-xs text-muted-foreground\">Active Users</p>\n                      <p className=\"text-lg font-bold text-green-600\" data-testid=\"text-active-users\">\n                        {adminStats?.activeUsers || 0}\n                      </p>\n                    </div>\n                    <UserCheck className=\"w-6 h-6 text-green-600 flex-shrink-0\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 min-w-0 pr-2\">\n                      <p className=\"text-xs text-muted-foreground\">Total Expenses</p>\n                      <p className=\"text-sm font-bold truncate\" data-testid=\"text-total-platform-expenses\">\n                        {formatNaira(adminStats?.totalExpenses || 0)}\n                      </p>\n                    </div>\n                    <Banknote className=\"w-6 h-6 text-primary flex-shrink-0\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 min-w-0 pr-2\">\n                      <p className=\"text-xs text-muted-foreground\">Avg Spending</p>\n                      <p className=\"text-sm font-bold truncate\" data-testid=\"text-average-spending\">\n                        {formatNaira(adminStats?.averageSpending || 0)}\n                      </p>\n                    </div>\n                    <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg font-display\">\n                  <Activity className=\"w-5 h-5 mr-2\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">New users this month:</span>\n                    <Badge variant=\"secondary\">{adminStats?.newUsersThisMonth || 0}</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">System status:</span>\n                    <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                      Healthy\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"px-4 space-y-4 max-w-full\">\n            {/* User Filters */}\n            <Card>\n              <CardContent className=\"p-4 space-y-3\">\n                <div>\n                  <Label htmlFor=\"user-search\">Search Users</Label>\n                  <div className=\"relative mt-1\">\n                    <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"user-search\"\n                      placeholder=\"Search by email or name...\"\n                      value={userSearchTerm}\n                      onChange={(e) => setUserSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-user-search\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"user-filter\">Filter by Status</Label>\n                  <Select value={userFilterStatus} onValueChange={(value: \"all\" | \"active\" | \"inactive\") => setUserFilterStatus(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Users</SelectItem>\n                      <SelectItem value=\"active\">Active Users</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive Users</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Users List */}\n            <div className=\"space-y-3\">\n              {usersLoading ? (\n                <div className=\"animate-pulse space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-20 bg-muted rounded-lg\"></div>\n                  ))}\n                </div>\n              ) : filteredUsers.length > 0 ? (\n                filteredUsers.map((user) => (\n                  <Card key={user.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center relative\">\n                            <span className=\"text-white font-semibold text-sm\">\n                              {user.firstName?.[0] || user.email[0].toUpperCase()}\n                            </span>\n                            {user.isAdmin && (\n                              <Crown className=\"absolute -top-1 -right-1 w-4 h-4 text-yellow-500\" />\n                            )}\n                          </div>\n                          <div>\n                            <div className=\"flex items-center gap-2\">\n                              <p className=\"font-medium text-sm\">\n                                {user.firstName && user.lastName \n                                  ? `${user.firstName} ${user.lastName}` \n                                  : user.email}\n                              </p>\n                              {user.isAdmin && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">Admin</Badge>\n                              )}\n                              {!user.isActive && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">Inactive</Badge>\n                              )}\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formatNaira(user.totalExpenses)} total expenses\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col gap-1\">\n                          <Button\n                            size=\"sm\"\n                            variant={user.isActive ? \"destructive\" : \"default\"}\n                            onClick={() => toggleUserStatusMutation.mutate({\n                              userId: user.id,\n                              isActive: !user.isActive\n                            })}\n                            disabled={toggleUserStatusMutation.isPending}\n                            data-testid={`button-toggle-user-status-${user.id}`}\n                          >\n                            {user.isActive ? <UserX className=\"w-3 h-3\" /> : <UserCheck className=\"w-3 h-3\" />}\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => toggleAdminStatusMutation.mutate({\n                              userId: user.id,\n                              isAdmin: !user.isAdmin\n                            })}\n                            disabled={toggleAdminStatusMutation.isPending}\n                            data-testid={`button-toggle-admin-status-${user.id}`}\n                          >\n                            <Shield className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground mb-2\">No users found</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Try adjusting your search or filter criteria\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reports\" className=\"px-4 space-y-4 max-w-full\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg font-display\">\n                  <BarChart3 className=\"w-5 h-5 mr-2\" />\n                  System Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => toast({\n                    title: \"User Analytics\",\n                    description: \"Detailed user analytics report coming soon!\",\n                  })}\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Generate User Analytics Report\n                </Button>\n\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => toast({\n                    title: \"Financial Report\",\n                    description: \"Financial summary report coming soon!\",\n                  })}\n                >\n                  <Banknote className=\"w-4 h-4 mr-2\" />\n                  Generate Financial Report\n                </Button>\n\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => toast({\n                    title: \"System Health\",\n                    description: \"System health report coming soon!\",\n                  })}\n                >\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  System Health Report\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Quick System Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg font-display\">\n                  <Settings className=\"w-5 h-5 mr-2\" />\n                  System Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Application Version:</span>\n                  <Badge variant=\"outline\">v1.0.0</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Database Status:</span>\n                  <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                    Connected\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Last Backup:</span>\n                  <span className=\"text-sm\">Today at 3:00 AM</span>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":19163},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Camera, Upload, Bot, Edit3 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { ExpenseCard } from \"@/components/expense-card\";\nimport { CategoryChart } from \"@/components/category-chart\";\nimport { CameraModal } from \"@/components/camera-modal\";\nimport { ProcessingModal } from \"@/components/processing-modal\";\nimport { ResultsModal } from \"@/components/results-modal\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { processReceipt, type OCRResult } from \"@/lib/ocr\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DashboardStats {\n  totalExpenses: number;\n  monthlyTotal: number;\n  weeklyTotal: number;\n  categoryTotals: Record<string, number>;\n  receiptCount: number;\n  categoryCount: number;\n  recentTransactions: any[];\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showCameraModal, setShowCameraModal] = useState(false);\n  const [showProcessingModal, setShowProcessingModal] = useState(false);\n  const [showResultsModal, setShowResultsModal] = useState(false);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [currentImageUrl, setCurrentImageUrl] = useState<string>();\n  const [ocrResult, setOcrResult] = useState<OCRResult | null>(null);\n\n  // Scroll to top when component mounts (after login)\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (expenseData: any) => {\n      const response = await apiRequest('/api/expenses', 'POST', expenseData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: \"Success!\",\n        description: \"Expense saved successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save expense\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCameraCapture = async (file: File) => {\n    setShowCameraModal(false);\n    setShowProcessingModal(true);\n    setProcessingProgress(0);\n    setCurrentImageUrl(URL.createObjectURL(file));\n\n    // Simulate progress updates\n    const progressInterval = setInterval(() => {\n      setProcessingProgress(prev => {\n        if (prev >= 90) {\n          clearInterval(progressInterval);\n          return 90;\n        }\n        return prev + 10;\n      });\n    }, 300);\n\n    try {\n      const result = await processReceipt(file);\n      setProcessingProgress(100);\n      setTimeout(() => {\n        setOcrResult(result);\n        setShowProcessingModal(false);\n        setShowResultsModal(true);\n        clearInterval(progressInterval);\n      }, 500);\n    } catch (error) {\n      clearInterval(progressInterval);\n      setShowProcessingModal(false);\n      toast({\n        title: \"OCR Failed\",\n        description: \"Could not process receipt image. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleFileUpload = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        handleCameraCapture(file);\n      }\n    };\n    input.click();\n  };\n\n  const handleSaveExpense = async (data: { category: string; notes: string }) => {\n    if (!ocrResult) return;\n\n    const expenseData = {\n      merchant: ocrResult.merchant,\n      category: data.category,\n      amount: ocrResult.amount.toString(),\n      date: new Date(ocrResult.date),\n      notes: data.notes,\n      items: ocrResult.items\n    };\n\n    await createExpenseMutation.mutateAsync(expenseData);\n    setShowResultsModal(false);\n    setOcrResult(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n        <Header title=\"Dashboard\" />\n        <div className=\"p-4 space-y-6\">\n          <div className=\"animate-pulse\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              <div className=\"h-20 bg-muted rounded-lg\"></div>\n              <div className=\"h-20 bg-muted rounded-lg\"></div>\n              <div className=\"h-20 bg-muted rounded-lg\"></div>\n              <div className=\"h-20 bg-muted rounded-lg\"></div>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div className=\"h-12 bg-muted rounded-lg\"></div>\n              <div className=\"h-12 bg-muted rounded-lg\"></div>\n            </div>\n            \n            {/* Chart Area */}\n            <div className=\"h-64 bg-muted rounded-lg mb-6\"></div>\n            \n            {/* Recent Transactions */}\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-muted rounded w-32\"></div>\n              <div className=\"h-16 bg-muted rounded-lg\"></div>\n              <div className=\"h-16 bg-muted rounded-lg\"></div>\n              <div className=\"h-16 bg-muted rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  const budgetLimit = 5000000; // Default budget of ₦5,000,000\n  const budgetLeft = budgetLimit - (stats?.monthlyTotal || 0);\n  const budgetUsagePercent = ((stats?.monthlyTotal || 0) / budgetLimit) * 100;\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen overflow-x-hidden\">\n      <Header title=\"Dashboard\" />\n      \n      <main className=\"pb-20 max-w-full\">\n        {/* Dashboard Overview Section */}\n        <section className=\"px-4 py-4 max-w-full\">\n          <div className=\"grid grid-cols-1 gap-6\">\n            <Card className=\"bg-primary text-white border-0\">\n              <CardContent className=\"p-4 lg:p-6\">\n                <div className=\"flex items-start justify-between mb-4 max-w-full\">\n                  <div className=\"flex-1 min-w-0 pr-3\">\n                    <p className=\"text-green-100 text-sm font-medium\">Total Expenses</p>\n                    <h2 className=\"text-xl lg:text-2xl font-bold truncate\" data-testid=\"text-total-expenses\">\n                      {formatNaira(stats?.monthlyTotal || 0)}\n                    </h2>\n                    <p className=\"text-green-100 text-xs mt-1\">This month</p>\n                  </div>\n                  <div className=\"text-right flex-1 min-w-0\">\n                    <p className=\"text-green-100 text-sm\">Budget Left</p>\n                    <p className=\"text-lg lg:text-xl font-semibold truncate\" data-testid=\"text-budget-left\">\n                      {formatNaira(Math.max(0, budgetLeft))}\n                    </p>\n                    <div className=\"h-1 bg-green-800 rounded-full mt-1 mb-1 w-full max-w-[200px] ml-auto\">\n                      <div \n                        className=\"h-full bg-green-300 rounded-full transition-all\" \n                        style={{ width: `${Math.min(100, budgetUsagePercent)}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Quick Stats */}\n                <div className=\"grid grid-cols-3 gap-3 lg:gap-4 mt-6 max-w-full\">\n                  <Card className=\"bg-white/10 border-0 max-w-full\">\n                    <CardContent className=\"p-3 lg:p-4 text-center\">\n                      <i className=\"fas fa-receipt text-white/80 mb-1 text-sm lg:text-base\" />\n                      <p className=\"text-xs lg:text-sm text-green-100\">Receipts</p>\n                      <p className=\"font-semibold text-sm lg:text-base\" data-testid=\"text-receipt-count\">\n                        {stats?.receiptCount || 0}\n                      </p>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"bg-white/10 border-0 max-w-full\">\n                    <CardContent className=\"p-3 lg:p-4 text-center\">\n                      <i className=\"fas fa-chart-line text-white/80 mb-1 text-sm lg:text-base\" />\n                      <p className=\"text-xs lg:text-sm text-green-100\">Categories</p>\n                      <p className=\"font-semibold text-sm lg:text-base\" data-testid=\"text-category-count\">\n                        {stats?.categoryCount || 0}\n                      </p>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"bg-white/10 border-0 max-w-full\">\n                    <CardContent className=\"p-3 lg:p-4 text-center\">\n                      <i className=\"fas fa-calendar-day text-white/80 mb-1 text-sm lg:text-base\" />\n                      <p className=\"text-xs lg:text-sm text-green-100\">This Week</p>\n                      <p className=\"font-semibold text-sm lg:text-base truncate\" data-testid=\"text-weekly-expenses\">\n                        {formatNaira(stats?.weeklyTotal || 0)}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Quick Actions */}\n        <section className=\"px-4 py-4 max-w-full\">\n          <div className=\"flex justify-center space-x-2 sm:space-x-3 max-w-full overflow-x-auto\">\n            <Button \n              onClick={() => setShowCameraModal(true)}\n              className=\"flex-shrink-0 min-w-0 bg-primary text-white py-3 px-4 sm:py-4 sm:px-6 rounded-xl font-semibold hover:bg-primary/90 shadow-lg text-sm sm:text-base\"\n              data-testid=\"button-scan-receipt\"\n            >\n              <Camera className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2\" />\n              <span className=\"whitespace-nowrap\">Scan</span>\n            </Button>\n            <Button \n              onClick={handleFileUpload}\n              variant=\"outline\"\n              className=\"flex-shrink-0 min-w-0 bg-secondary text-secondary-foreground py-3 px-4 sm:py-4 sm:px-6 rounded-xl font-semibold hover:bg-secondary/80 shadow-lg border-2 text-sm sm:text-base\"\n              data-testid=\"button-upload-file\"\n            >\n              <Upload className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2\" />\n              <span className=\"whitespace-nowrap\">Upload</span>\n            </Button>\n            <Link href=\"/manual-entry\">\n              <Button \n                variant=\"outline\"\n                className=\"flex-shrink-0 min-w-0 bg-secondary text-secondary-foreground py-3 px-4 sm:py-4 sm:px-6 rounded-xl font-semibold hover:bg-secondary/80 shadow-lg border-2 text-sm sm:text-base\"\n                data-testid=\"button-manual-entry\"\n              >\n                <Edit3 className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2\" />\n                <span className=\"whitespace-nowrap\">Type</span>\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Recent Transactions */}\n        <section className=\"px-4 py-2 max-w-full\">\n          <div className=\"flex items-center justify-between mb-4 max-w-full\">\n            <h3 className=\"text-lg font-semibold text-muted-foreground font-display\">Recent Transactions</h3>\n            <Button \n              variant=\"link\" \n              className=\"text-primary text-sm font-medium p-0 flex-shrink-0\"\n              data-testid=\"button-view-all-transactions\"\n            >\n              View All\n            </Button>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {stats?.recentTransactions?.length ? (\n              stats.recentTransactions.map((expense: any) => (\n                <ExpenseCard key={expense.id} expense={expense} />\n              ))\n            ) : (\n              <Card className=\"border-dashed border-2 border-gray-200\">\n                <CardContent className=\"p-8 text-center\">\n                  <Camera className=\"w-12 h-12 mx-auto text-gray-300 mb-4\" />\n                  <p className=\"text-gray-500 mb-2\">No expenses yet</p>\n                  <p className=\"text-sm text-gray-400\">\n                    Scan your first receipt to get started\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </section>\n\n        {/* Spending Categories */}\n        {stats?.categoryTotals && Object.keys(stats.categoryTotals).length > 0 && (\n          <section className=\"px-4 py-6 max-w-full\">\n            <CategoryChart categoryTotals={stats.categoryTotals} />\n          </section>\n        )}\n      </main>\n\n      <BottomNavigation />\n      \n      {/* Modals */}\n      <CameraModal \n        isOpen={showCameraModal}\n        onClose={() => setShowCameraModal(false)}\n        onCapture={handleCameraCapture}\n      />\n      \n      <ProcessingModal \n        isOpen={showProcessingModal}\n        onClose={() => setShowProcessingModal(false)}\n        progress={processingProgress}\n        imageUrl={currentImageUrl}\n      />\n      \n      <ResultsModal \n        isOpen={showResultsModal}\n        onClose={() => setShowResultsModal(false)}\n        onSave={handleSaveExpense}\n        ocrResult={ocrResult}\n      />\n    </div>\n  );\n}\n","size_bytes":13637},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Scan, PieChart, Receipt, Shield, Users, Smartphone, ArrowRight, Star, Car, Camera, TrendingUp, FileText, Building, Eye, Moon, Sun, ChevronUp, StarIcon, BarChart3, FileBarChart, Plus, Bot, MessageCircle, Calendar } from \"lucide-react\";\nimport { useSettings } from \"@/hooks/use-settings\";\nimport { FeedbackModal } from \"@/components/feedback-modal\";\nimport { WhatsAppBusiness } from \"@/components/whatsapp-business\";\nimport { useState, useEffect } from \"react\";\n\n// Add CSS animations for seamless sliding carousel\nconst slideAnimationCSS = `\n  @keyframes slideInOut {\n    0% {\n      transform: translateX(120%);\n      opacity: 1;\n    }\n    8% {\n      transform: translateX(0%);\n      opacity: 1;\n    }\n    92% {\n      transform: translateX(0%);\n      opacity: 1;\n    }\n    100% {\n      transform: translateX(-120%);\n      opacity: 1;\n    }\n  }\n  \n  .slide-container {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background: transparent;\n  }\n  \n  .slide-content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n  }\n`;\n\nexport default function Landing() {\n  const { settings, toggleDarkMode } = useSettings();\n  const [displayText, setDisplayText] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(true);\n  const fullText = \"Scan. Track. Report.\";\n  \n  // Carousel state for features\n  const [currentFeature, setCurrentFeature] = useState(-1); // Start with -1 to hide first slide initially\n  const [isCarouselLoaded, setIsCarouselLoaded] = useState(false);\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [showSlides, setShowSlides] = useState(false);\n  const [isFirstSlideShown, setIsFirstSlideShown] = useState(false);\n  \n  const features = [\n    {\n      icon: TrendingUp,\n      title: \"85% Higher Loan Approval Rate\",\n      type: \"benefit\",\n      description: \"Professional expense reports increase your loan approval chances by 85%.\",\n      detail: \"Banks and investors approve 85% more loan applications when backed by organized financial records. KudiScan's professional reports demonstrate financial discipline and provide the documentation lenders require for business expansion funding.\",\n      color: \"#166534\" // Dark green\n    },\n    {\n      icon: Scan,\n      title: \"Receipt Scanning\",\n      type: \"feature\",\n      description: \"Snap to Scan, Save & Track receipts.\",\n      detail: \"Advanced OCR technology instantly captures and stores your receipts. Simply snap a photo and our AI automatically extracts merchant data, amounts, dates, and itemized purchases.\",\n      color: \"#1e3a8a\" // Dark blue\n    },\n    {\n      icon: TrendingUp,\n      title: \"Save 10+ Hours of Work, Weekly\",\n      type: \"benefit\",\n      description: \"Eliminate manual data entry and receipt organization completely.\",\n      detail: \"No more typing expense amounts or hunting for lost receipts. KudiScan automates everything, giving you back hours each week to focus on growing your business instead of paperwork.\",\n      color: \"#581c87\" // Dark purple\n    },\n    {\n      icon: Eye,\n      title: \"AI + OCR Integration\", \n      type: \"feature\",\n      description: \"AI powered OCR technology automatically extracts and categorizes all data on receipts.\",\n      detail: \"Our AI combines Machine Learning with optical character recognition to understand your receipts like a human would. It recognizes local context and learns from your patterns.\",\n      color: \"#ea580c\" // Orange\n    },\n    {\n      icon: FileText,\n      title: \"Get Bank Loans Faster\",\n      type: \"benefit\",\n      description: \"Professional financial reports that banks and investors trust.\",\n      detail: \"Access to business credit becomes simple when you have organized financial records. Our reports meet banking standards and help you secure loans, investments, or government grants for business growth.\",\n      color: \"#134e4a\" // Dark teal\n    },\n    {\n      icon: BarChart3,\n      title: \"Financial Reporting\",\n      type: \"feature\",\n      description: \"Generate tailored reports to analyze spend, identify trends, make smarter decisions and secure bank loans.\",\n      detail: \"Create professional reports for business loans, investor presentations, or tax filing. Export to PDF or Excel formats that banks and investors expect.\",\n      color: \"#a16207\" // Dark yellow\n    },\n    {\n      icon: Building,\n      title: \"Scale Your Business\",\n      type: \"benefit\",\n      description: \"Make data-driven decisions with real-time spending insights.\",\n      detail: \"Know exactly where your money goes and identify cost-saving opportunities. Track profitability by category, spot trends early, and make smarter financial decisions that help your business grow sustainably.\",\n      color: \"#3730a3\" // Dark indigo\n    },\n    {\n      icon: Smartphone,\n      title: \"Mobile-First Approach\",\n      type: \"feature\",\n      description: \"Manage expenses and scan receipts on-the-go.\",\n      detail: \"KudiScan was designed for the mobile-first Nigerian market. Capture receipts instantly, work offline when needed, and sync across all devices.\",\n      color: \"#334155\" // Dark slate\n    },\n    {\n      icon: Shield,\n      title: \"Bank-Level Security\",\n      type: \"benefit\",\n      description: \"Your financial data stays private and completely secure.\",\n      detail: \"Sleep peacefully knowing your sensitive business data is protected with the same 256-bit encryption used by major Nigerian banks. Your information never leaves secure Nigerian data centers.\",\n      color: \"#166534\" // Dark green\n    },\n    {\n      icon: () => <span className=\"text-4xl\">₦</span>,\n      title: \"Naira Currency Support\",\n      type: \"feature\",\n      description: \"Built for Nigerian users with native Naira support and local preferences.\",\n      detail: \"Every feature is built with Nigerian Naira as the primary currency. Automatic kobo calculations, proper number formatting, and integration with Nigerian payment systems.\",\n      color: \"#5b21b6\" // Dark violet\n    },\n    {\n      icon: Star,\n      title: \"Start Free Today\",\n      type: \"benefit\",\n      description: \"Begin tracking expenses immediately with no upfront costs.\",\n      detail: \"Get started with 10 free receipt scans monthly. Experience the full KudiScan advantage risk-free, then upgrade when you're ready to unlock unlimited scanning and advanced features.\",\n      color: \"#a855f7\" // Lilac\n    }\n  ];\n  \n  useEffect(() => {\n    let currentIndex = 0;\n    setDisplayText(\"\");\n    setIsTyping(true);\n    \n    const typeTimer = setInterval(() => {\n      if (currentIndex <= fullText.length) {\n        setDisplayText(fullText.slice(0, currentIndex));\n        currentIndex++;\n      } else {\n        clearInterval(typeTimer);\n        setIsTyping(false);\n      }\n    }, 150);\n    \n    return () => clearInterval(typeTimer);\n  }, []);\n  \n  // Carousel effect with proper initialization to prevent loading bugs\n  useEffect(() => {\n    let carouselTimer: NodeJS.Timeout;\n    \n    // Set initial load state\n    const loadingDelay = setTimeout(() => {\n      setIsCarouselLoaded(true);\n    }, 500);\n    \n    // Show first slide after a delay (3 seconds after page load)\n    const firstSlideDelay = setTimeout(() => {\n      setShowSlides(true);\n      setCurrentFeature(0); // Show first slide\n      setIsFirstSlideShown(true);\n    }, 3000);\n    \n    // Initialize carousel after first slide is shown (start with slide 1, not cycling back to 0)\n    const initializationDelay = setTimeout(() => {\n      setHasAnimated(true); // Enable animations for subsequent slides\n      setCurrentFeature(1); // Move to second slide immediately\n      \n      let slideIndex = 1; // Start from second slide\n      carouselTimer = setInterval(() => {\n        slideIndex = slideIndex + 1;\n        // Skip slide 0 (first slide) in the cycle to prevent reappearance\n        if (slideIndex >= features.length) {\n          slideIndex = 1; // Skip back to slide 1, not slide 0\n        }\n        setCurrentFeature(slideIndex);\n      }, 6000); // Change feature/benefit every 6 seconds for slow, captivating viewing\n    }, 9000); // Start carousel after first slide has been displayed for 6 seconds\n    \n    return () => {\n      clearTimeout(loadingDelay);\n      clearTimeout(firstSlideDelay);\n      clearTimeout(initializationDelay);\n      if (carouselTimer) clearInterval(carouselTimer);\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground overflow-x-hidden\">\n      <style dangerouslySetInnerHTML={{__html: slideAnimationCSS}} />\n      {/* Navbar */}\n      <nav className=\"px-4 py-4 bg-background border-b border-border\">\n        <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Bot className=\"w-10 h-10 text-primary mr-2\" />\n            <span className=\"text-2xl font-bold\">\n              <span style={{color: '#29A378'}}>Kudi</span>\n              <span className=\"text-white\">Scan</span>\n            </span>\n          </Link>\n          <div className=\"flex items-center space-x-4\">\n\n            <Link href=\"/login\">\n              <Button variant=\"outline\">Sign in</Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"px-4 py-8 w-full\" style={{backgroundColor: '#29A378'}}>\n        <div className=\"max-w-4xl mx-auto text-center w-full\">\n          <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold text-white mb-3 font-display h-[3rem] sm:h-[4rem] md:h-[5rem] lg:h-[6rem] xl:h-[7rem] flex items-center justify-center\">\n            <span className=\"typing-text inline-block text-center\">\n              {displayText}\n              {isTyping && <span className=\"animate-pulse\">|</span>}\n            </span>\n          </h1>\n          \n          {/* Trust Badge */}\n\n          \n          {/* Feature Carousel Display */}\n          <div className=\"relative flex items-center justify-center gap-6 max-w-4xl mx-auto mb-1 -mt-2\">\n            {/* Samsung Tablet with Feature Carousel */}\n            <div className=\"hidden md:block relative\">\n              <svg width=\"600\" height=\"420\" viewBox=\"0 0 720 480\" className=\"drop-shadow-2xl\">\n                {/* Tablet Frame - Horizontal Samsung Style (1.5x larger) */}\n                <rect x=\"15\" y=\"30\" width=\"690\" height=\"420\" rx=\"30\" fill=\"#1f2937\" stroke=\"#374151\" strokeWidth=\"3\"/>\n                <rect x=\"30\" y=\"45\" width=\"660\" height=\"390\" rx=\"22\" fill=\"#111827\"/>\n                \n                {/* Front Camera */}\n                <circle cx=\"600\" cy=\"70\" r=\"4\" fill=\"#374151\"/>\n                <circle cx=\"600\" cy=\"70\" r=\"2\" fill=\"#1f2937\"/>\n                \n\n                \n                {/* Screen Content - Feature Display (1.5x larger) */}\n                <rect x=\"60\" y=\"60\" width=\"600\" height=\"360\" fill=\"#111827\"/>\n                \n                {/* Centered KudiBot Logo (1.5x larger) */}\n                <foreignObject x=\"300\" y=\"195\" width=\"120\" height=\"120\">\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <Bot className=\"w-24 h-24 text-white\" />\n                  </div>\n                </foreignObject>\n                \n                {/* Feature Content (1.5x larger) */}\n                <foreignObject x=\"60\" y=\"60\" width=\"600\" height=\"360\">\n                  <div className=\"slide-container\">\n                    {showSlides && currentFeature >= 0 && (\n                    <div \n                      className=\"slide-content p-9\"\n                      style={{\n                        animation: hasAnimated && currentFeature > 0 ? `slideInOut 6s ease-in-out` : currentFeature === 0 ? `slideInOut 6s ease-in-out` : 'none',\n                        background: features[currentFeature].color || '#111827'\n                      }}\n                      key={currentFeature}\n                    >\n                      {/* Icon - Larger container to reach closer to margins */}\n                      <div className=\"w-32 h-32 bg-white/10 flex items-center justify-center mb-6 rounded-xl\">\n                        {features[currentFeature].icon === Scan && <Scan className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === TrendingUp && <TrendingUp className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === Eye && <Eye className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === FileText && <FileText className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === BarChart3 && <BarChart3 className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === Building && <Building className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === Smartphone && <Smartphone className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === Shield && <Shield className=\"w-28 h-28 text-white\" />}\n                        {features[currentFeature].icon === Star && <Star className=\"w-28 h-28 text-white\" />}\n                        {typeof features[currentFeature].icon === 'function' && features[currentFeature].icon !== Scan && features[currentFeature].icon !== TrendingUp && features[currentFeature].icon !== Eye && features[currentFeature].icon !== FileText && features[currentFeature].icon !== BarChart3 && features[currentFeature].icon !== Building && features[currentFeature].icon !== Smartphone && features[currentFeature].icon !== Shield && features[currentFeature].icon !== Star && <span className=\"text-7xl text-white\">₦</span>}\n                      </div>\n                      \n                      {/* Title (1.5x larger) */}\n                      <h3 className=\"text-3xl font-bold text-white mb-4\">\n                        {features[currentFeature].title}\n                      </h3>\n                      \n                      {/* Description (1.5x larger) */}\n                      <p className=\"text-white/90 text-base leading-relaxed\">\n                        {features[currentFeature].description}\n                      </p>\n                    </div>\n                    )}\n                  </div>\n                </foreignObject>\n              </svg>\n            </div>\n\n            {/* iPhone with Feature Carousel */}\n            <div className=\"relative\">\n              <svg width=\"160\" height=\"320\" viewBox=\"0 0 200 400\" className=\"drop-shadow-2xl md:scale-90 lg:scale-100 xl:scale-110\">\n                {/* iPhone Frame */}\n                <rect x=\"10\" y=\"10\" width=\"180\" height=\"380\" rx=\"45\" fill=\"#1f2937\" stroke=\"#374151\" strokeWidth=\"2\"/>\n                <rect x=\"20\" y=\"25\" width=\"160\" height=\"350\" rx=\"35\" fill=\"#111827\"/>\n                \n                {/* iPhone Notch */}\n                <rect x=\"75\" y=\"10\" width=\"50\" height=\"25\" rx=\"12\" fill=\"#1f2937\"/>\n                \n                {/* Front Camera in notch */}\n                <circle cx=\"100\" cy=\"22\" r=\"3\" fill=\"#374151\"/>\n                <circle cx=\"100\" cy=\"22\" r=\"1.5\" fill=\"#1f2937\"/>\n                \n\n                \n                {/* Mobile Feature Display */}\n                <rect x=\"35\" y=\"60\" width=\"130\" height=\"290\" fill=\"#111827\"/>\n                \n                {/* iPhone Centered KudiBot Logo */}\n                <foreignObject x=\"80\" y=\"180\" width=\"40\" height=\"40\">\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <Bot className=\"w-12 h-12 text-white\" />\n                  </div>\n                </foreignObject>\n                \n                <foreignObject x=\"35\" y=\"60\" width=\"130\" height=\"290\">\n                  <div className=\"slide-container\">\n                    {showSlides && currentFeature >= 0 && (\n                    <div \n                      className=\"slide-content p-4\"\n                      style={{\n                        animation: hasAnimated && currentFeature > 0 ? `slideInOut 6s ease-in-out` : currentFeature === 0 ? `slideInOut 6s ease-in-out` : 'none',\n                        background: features[currentFeature].color || '#111827'\n                      }}\n                      key={currentFeature}\n                    >\n                      {/* Mobile Icon - Larger container */}\n                      <div className=\"w-16 h-16 bg-white/10 flex items-center justify-center mb-3 rounded-lg\">\n                        {features[currentFeature].icon === Scan && <Scan className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === TrendingUp && <TrendingUp className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === Eye && <Eye className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === FileText && <FileText className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === BarChart3 && <BarChart3 className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === Building && <Building className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === Smartphone && <Smartphone className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === Shield && <Shield className=\"w-10 h-10 text-white\" />}\n                        {features[currentFeature].icon === Star && <Star className=\"w-10 h-10 text-white\" />}\n                        {typeof features[currentFeature].icon === 'function' && features[currentFeature].icon !== Scan && features[currentFeature].icon !== TrendingUp && features[currentFeature].icon !== Eye && features[currentFeature].icon !== FileText && features[currentFeature].icon !== BarChart3 && features[currentFeature].icon !== Building && features[currentFeature].icon !== Smartphone && features[currentFeature].icon !== Shield && features[currentFeature].icon !== Star && <span className=\"text-4xl text-white\">₦</span>}\n                      </div>\n                      \n                      {/* Mobile Title */}\n                      <h4 className=\"text-sm font-bold text-white mb-2 leading-tight\">\n                        {features[currentFeature].title}\n                      </h4>\n                      \n                      {/* Mobile Description */}\n                      <p className=\"text-white/90 text-xs leading-relaxed\">\n                        {features[currentFeature].description}\n                      </p>\n                    </div>\n                    )}\n                  </div>\n                </foreignObject>\n                \n                {/* iPhone Home Indicator */}\n                <rect x=\"85\" y=\"385\" width=\"30\" height=\"4\" rx=\"2\" fill=\"#4b5563\"/>\n              </svg>\n            </div>\n          </div>\n\n          <div className=\"max-w-5xl mx-auto mb-2\">\n            <p className=\"text-xl md:text-2xl lg:text-3xl text-white text-center mb-2 opacity-90 px-4 font-medium leading-relaxed\">\n              Your <Bot className=\"inline-block w-6 h-6 md:w-8 md:h-8 lg:w-10 lg:h-10 mx-2 text-white animate-bot-pulse\" /> automated finance assistant.\n            </p>\n            \n            {/* Process Flow */}\n            <div className=\"flex flex-col md:flex-row items-center justify-center gap-2 md:gap-3\">\n              {/* Step 1: Snap */}\n              <div className=\"flex flex-col items-center text-center p-4 w-48 min-h-[140px]\">\n                <div className=\"w-16 h-16 rounded-xl flex items-center justify-center mb-3\">\n                  <Camera className=\"w-10 h-10 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-1 text-base md:text-lg\">Snap</h3>\n                <p className=\"text-sm md:text-base leading-tight text-white\">Snap / Upload a receipt to scan your expenses</p>\n              </div>\n              \n              {/* Arrow 1 */}\n              <div className=\"hidden md:block\">\n                <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n              </div>\n              <div className=\"md:hidden\">\n                <div className=\"w-6 h-6 rotate-90\">\n                  <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n                </div>\n              </div>\n              \n              {/* Step 2: Track */}\n              <div className=\"flex flex-col items-center text-center p-4 w-48 min-h-[140px]\">\n                <div className=\"w-16 h-16 rounded-xl flex items-center justify-center mb-3\">\n                  <TrendingUp className=\"w-10 h-10 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-1 text-base md:text-lg\">Track</h3>\n                <p className=\"text-sm md:text-base leading-tight text-white\">Track spending across categories with intelligent insights</p>\n              </div>\n              \n              {/* Arrow 2 */}\n              <div className=\"hidden md:block\">\n                <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n              </div>\n              <div className=\"md:hidden\">\n                <div className=\"w-6 h-6 rotate-90\">\n                  <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n                </div>\n              </div>\n              \n              {/* Step 3: Report */}\n              <div className=\"flex flex-col items-center text-center p-4 w-48 min-h-[140px]\">\n                <div className=\"w-16 h-16 rounded-xl flex items-center justify-center mb-3\">\n                  <FileText className=\"w-10 h-10 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-1 text-base md:text-lg\">Report</h3>\n                <p className=\"text-sm md:text-base leading-tight text-white\">Generate professional expense reports for business use</p>\n              </div>\n              \n              {/* Arrow 3 */}\n              <div className=\"hidden md:block\">\n                <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n              </div>\n              <div className=\"md:hidden\">\n                <div className=\"w-6 h-6 rotate-90\">\n                  <ArrowRight className=\"w-6 h-6 text-white animate-arrow-pulse\" />\n                </div>\n              </div>\n              \n              {/* Step 4: Scale */}\n              <div className=\"flex flex-col items-center text-center p-4 w-48 min-h-[140px]\">\n                <div className=\"w-16 h-16 rounded-xl flex items-center justify-center mb-3\">\n                  <Building className=\"w-10 h-10 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-1 text-base md:text-lg\">Scale</h3>\n                <p className=\"text-sm md:text-base leading-tight text-white\">Secure loans from banks and investors to scale your business</p>\n              </div>\n            </div>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"border border-border rounded-2xl p-6 md:p-8 mb-8 w-full max-w-lg mx-auto\" style={{backgroundColor: '#082118'}}>\n            <h3 className=\"text-xl md:text-2xl font-semibold mb-4 font-display text-white text-center\">I want to:</h3>\n            \n            <div className=\"flex flex-col gap-3 w-full mx-auto\">\n              <Link href=\"/register\" className=\"w-full\">\n                <Button size=\"lg\" className=\"w-full justify-center text-center px-4 text-base md:text-lg\" data-testid=\"button-personal\">\n                  Track my personal expenses\n                </Button>\n              </Link>\n              \n              <Link href=\"/register\" className=\"w-full\">\n                <Button variant=\"outline\" size=\"lg\" className=\"w-full justify-center text-center px-4 text-base md:text-lg\" data-testid=\"button-small-business\">\n                  Manage my business expenses\n                </Button>\n              </Link>\n              \n\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Company Logos */}\n      <section className=\"px-4 py-12 md:py-14 lg:py-16 w-full overflow-hidden relative min-h-[250px] md:min-h-[300px] lg:min-h-[350px]\" style={{\n        background: `linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), \n                     url(\"https://images.pexels.com/photos/955395/pexels-photo-955395.jpeg?auto=compress&cs=tinysrgb&w=1920&h=1080&fit=crop\")`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}>\n        <div className=\"max-w-4xl mx-auto text-center w-full flex flex-col justify-center h-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-12 md:mb-16 lg:mb-20 font-display text-white\">\n            Brands Who Trust Us\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 md:gap-8 max-w-3xl mx-auto\">\n            <div className=\"flex items-center justify-center h-12 bg-white/10 border border-white/20 rounded text-sm font-semibold text-white hover:scale-105 hover:bg-white/15 transition-all duration-200\">\n              Konga\n            </div>\n            <div className=\"flex items-center justify-center h-12 bg-white/10 border border-white/20 rounded text-sm font-semibold text-white hover:scale-105 hover:bg-white/15 transition-all duration-200\">\n              Jumia\n            </div>\n            <div className=\"flex items-center justify-center h-12 bg-white/10 border border-white/20 rounded text-sm font-semibold text-white hover:scale-105 hover:bg-white/15 transition-all duration-200\">\n              GTBank\n            </div>\n            <div className=\"flex items-center justify-center h-12 bg-white/10 border border-white/20 rounded text-sm font-semibold text-white hover:scale-105 hover:bg-white/15 transition-all duration-200\">\n              Flutterwave\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"px-4 py-16 md:py-20 lg:py-24 w-full bg-background\">\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-4 md:mb-6 font-display text-foreground\">Features</h2>\n          \n          <div className=\"grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 lg:gap-10 mt-12 md:mt-16 lg:mt-20 w-full\">\n            {/* Receipt Scanning */}\n            <div className=\"text-center w-full max-w-sm lg:max-w-md mx-auto p-6 md:p-8 lg:p-10 rounded-2xl\" style={{backgroundColor: '#082118'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4 md:mb-6\">\n                <Scan className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg md:text-xl lg:text-2xl font-semibold mb-2 md:mb-3 lg:mb-4 font-display text-white\">Receipt Scanning</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Snap to Scan, Save & Track receipts.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Receipt Scanning</DialogTitle>\n                    <DialogDescription>\n                      Our advanced OCR technology instantly captures and stores your receipts. Simply snap a photo and our AI automatically extracts data such as name, item description, amount, date, and itemized purchases. No more manual data entry or lost receipts - everything is stored securely in the cloud and categorized for easy tracking.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* AI + OCR Integration */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0ea5e9'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Eye className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">AI + OCR Integration</h3>\n              <p className=\"text-sm text-white mb-4\">\n                AI powered OCR technology automatically extracts and categorizes all data on receipts.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>AI + OCR Integration</DialogTitle>\n                    <DialogDescription>\n                      Our AI combines Machine Learning with optical character recognition to understand your receipts like a human would. It recognizes and understands local context, handles poor image quality, and learns from your patterns to improve accuracy over time. The system automatically categorizes expenses and even detects potential duplicates.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Financial Reporting */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#082118'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Financial Reporting</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Generate tailored reports to analyze spend, identify trends, make smarter decisions and secure bank loans.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Financial Reporting</DialogTitle>\n                    <DialogDescription>\n                      Create professional reports for business loans, investor presentations, or tax filing. Our reports include spending trends, category breakdowns, cash flow analysis, and projections. Export to PDF or Excel formats that banks and investors expect. Track profitability, identify cost-saving opportunities, and make data-driven financial decisions.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Mobile-First Approach */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#082118'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Mobile-First Approach</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Manage expenses and scan receipts on-the-go.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Mobile-First Approach</DialogTitle>\n                    <DialogDescription>\n                      KudiScan was designed for the mobile-first Nigerian market. Capture receipts instantly, work offline when needed, and sync across all devices. The interface is optimized for touch, works on slow networks, and consumes minimal data. Perfect for busy entrepreneurs who need to track expenses while moving between meetings, markets, or client visits.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Bank-level Security */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#082118'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Bank-level Security</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Your financial data is protected with enterprise-grade encryption and security.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Bank-level Security</DialogTitle>\n                    <DialogDescription>\n                      Your data is protected with 256-bit AES encryption, the same standard used by major banks. We use secure data centers in Nigeria, comply with international privacy standards, and never store sensitive banking credentials. Two-factor authentication, regular security audits, and encrypted data transmission ensure your financial information stays private and secure.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Naira Currency */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#082118'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-4xl font-bold text-white\">₦</span>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Naira Currency</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Built for Nigerian users with native Naira support and local preferences.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Naira Currency Support</DialogTitle>\n                    <DialogDescription>\n                      Every feature is built with Nigerian Naira as the primary currency. Automatic kobo calculations, proper number formatting, local tax considerations, and support for cash-heavy business models. Integration with Nigerian payment systems, understanding of local business practices, and support for both formal and informal sector expense tracking needs.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"px-4 py-16 md:py-20 lg:py-24 w-full\" style={{backgroundColor: '#2D3339'}}>\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-12 md:mb-16 lg:mb-20 font-display\" style={{color: '#E1E7EF'}}>\n            How <span style={{color: '#29A378'}}>Kudi</span><span style={{color: '#E1E7EF'}}>Scan</span> Works\n          </h2>\n          \n          <div className=\"flex flex-col md:flex-row items-center justify-center gap-8 md:gap-4 w-full\">\n            <div className=\"text-center w-full max-w-sm lg:max-w-md mx-auto\">\n              <div className=\"w-32 h-32 bg-white/20 rounded-2xl flex items-center justify-center mx-auto mb-4 md:mb-6\">\n                <Plus className=\"w-20 h-20\" style={{color: '#29A378'}} />\n              </div>\n              <h3 className=\"text-lg md:text-xl lg:text-2xl font-semibold mb-2 md:mb-3 lg:mb-4 font-display\" style={{color: '#E1E7EF'}}>Add Expense</h3>\n              <p className=\"text-sm md:text-base lg:text-lg leading-relaxed\" style={{color: '#959AA0'}}>\n                Press the Scan or Upload button to add receipt\n              </p>\n            </div>\n\n            {/* Arrow 1 */}\n            <div className=\"hidden md:block\">\n              <ArrowRight className=\"w-8 h-8 animate-arrow-pulse\" style={{color: '#29A378'}} />\n            </div>\n            <div className=\"md:hidden\">\n              <div className=\"w-8 h-8 rotate-90\">\n                <ArrowRight className=\"w-8 h-8 animate-arrow-pulse\" style={{color: '#29A378'}} />\n              </div>\n            </div>\n\n            <div className=\"text-center w-full max-w-sm mx-auto\">\n              <div className=\"w-32 h-32 bg-white/20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-20 h-20\" style={{color: '#29A378'}} />\n              </div>\n              <h3 className=\"text-lg md:text-xl lg:text-2xl font-semibold mb-2 md:mb-3 lg:mb-4 font-display\" style={{color: '#E1E7EF'}}>Track & Analyze</h3>\n              <p className=\"text-sm md:text-base lg:text-lg leading-relaxed\" style={{color: '#959AA0'}}>\n                View spending analytics, category breakdowns, and budget tracking to understand your spending patterns.\n              </p>\n            </div>\n\n            {/* Arrow 2 */}\n            <div className=\"hidden md:block\">\n              <ArrowRight className=\"w-8 h-8 animate-arrow-pulse\" style={{color: '#29A378'}} />\n            </div>\n            <div className=\"md:hidden\">\n              <div className=\"w-8 h-8 rotate-90\">\n                <ArrowRight className=\"w-8 h-8 animate-arrow-pulse\" style={{color: '#29A378'}} />\n              </div>\n            </div>\n\n            <div className=\"text-center w-full max-w-sm mx-auto\">\n              <div className=\"w-32 h-32 bg-white/20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <FileBarChart className=\"w-20 h-20\" style={{color: '#29A378'}} />\n              </div>\n              <h3 className=\"text-lg md:text-xl lg:text-2xl font-semibold mb-2 md:mb-3 lg:mb-4 font-display\" style={{color: '#E1E7EF'}}>Generate Reports</h3>\n              <p className=\"text-sm md:text-base lg:text-lg leading-relaxed\" style={{color: '#959AA0'}}>\n                Generate expense reports for tracking, reimbursements, business investors and bank loan applications.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" className=\"px-8\" data-testid=\"button-get-started-main\">\n                Get Started\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"px-4 py-16 md:py-20 lg:py-24 w-full\" style={{backgroundColor: '#082118'}}>\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-4 md:mb-6 font-display text-white\">\n            Why Nigerian Businesses Choose <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-white\">Scan</span>\n          </h2>\n\n          \n          <div className=\"grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 lg:gap-10 mt-12 md:mt-16 lg:mt-20 w-full\">\n            {/* Save Time & Reduce Errors */}\n            <div className=\"text-center w-full max-w-sm lg:max-w-md mx-auto p-6 md:p-8 lg:p-10 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4 md:mb-6\">\n                <Calendar className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg md:text-xl lg:text-2xl font-semibold mb-2 md:mb-3 lg:mb-4 font-display text-white\">Save 10+ Hours Weekly</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Eliminate manual data entry and receipt organization. Our AI does the work for you.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Save 10+ Hours Weekly</DialogTitle>\n                    <DialogDescription>\n                      Stop wasting time on manual expense tracking. KudiScan's AI-powered OCR technology captures receipt data in seconds, automatically categorizes expenses, and generates reports instantly. Nigerian business owners report saving 10+ hours weekly on financial admin tasks, allowing them to focus on growing their business instead of paperwork.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Unlock Business Credit */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-4xl font-bold text-white\">₦</span>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Unlock Business Loans</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Generate bank-ready financial reports that meet CBN lending requirements.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Unlock Business Loans</DialogTitle>\n                    <DialogDescription>\n                      Access business credit and government intervention funds with professional financial reports. Our reports meet Central Bank of Nigeria (CBN) requirements for SME lending, helping you secure loans from banks like GTBank, UBA, Zenith Bank, and access programs like BOI, NIRSAL, and AGSMEIS funding opportunities.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Tax Compliance Made Easy */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Tax & Audit</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Stay FIRS compliant with automated VAT and income tax documentation.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Tax Compliance Made Easy</DialogTitle>\n                    <DialogDescription>\n                      Never worry about FIRS audits again. KudiScan automatically organizes all expense receipts with proper categorization for VAT filing, company income tax returns, and withholding tax documentation. Built-in compliance features ensure all records meet Federal Inland Revenue Service (FIRS) digital documentation standards.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Real-Time Financial Insights */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <PieChart className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Smart Financial Insights</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Get real-time spending analytics and budget alerts to make better business decisions.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Smart Financial Insights</DialogTitle>\n                    <DialogDescription>\n                      Make data-driven decisions with real-time financial analytics. Track spending patterns, identify cost-saving opportunities, monitor budget performance, and receive alerts before overspending. Our Nigerian market-specific insights help you optimize cash flow and identify profitable growth areas for your business.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Mobile-First Nigerian Design */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Mobile-First</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Mobile-first design with native Naira support and offline capabilities.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Built for Nigeria</DialogTitle>\n                    <DialogDescription>\n                      Designed specifically for the Nigerian market with mobile-first functionality, native Naira currency support, offline capabilities for unreliable network areas, and integration with local payment systems like Paystack. Works seamlessly across Nigerian banks and supports both formal and informal business expense tracking needs.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Bank-Level Security */}\n            <div className=\"text-center w-full max-w-sm mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#0f2a1e'}}>\n              <div className=\"w-20 h-20 bg-white/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-14 h-14 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-white\">Trusted by 10,000+ Users</h3>\n              <p className=\"text-sm text-white mb-4\">\n                Join Nigerian entrepreneurs and SMEs who trust KudiScan with their financial data.\n              </p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"link\" className=\"text-sm p-0 text-white hover:text-white/80\">Learn More</Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Trusted by 10,000+ Nigerian Users</DialogTitle>\n                    <DialogDescription>\n                      Protected with 256-bit encryption used by major Nigerian banks. Your sensitive business data never leaves secure Nigerian data centers. Trusted by over 10,000 Nigerian SMEs, freelancers, and entrepreneurs from Lagos to Abuja, Kano to Port Harcourt. GDPR compliant with local Nigerian data protection standards.\n                    </DialogDescription>\n                  </DialogHeader>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n          \n          <div className=\"text-center mt-12 md:mt-16 lg:mt-20\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" className=\"px-8\" data-testid=\"button-benefits-cta\">\n                Start Free\n              </Button>\n            </Link>\n            <p className=\"text-white/60 text-sm mt-4\">\n              10 free receipt scans monthly • No credit card required • Upgrade anytime\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Nigerian Federal Government Compliance Section */}\n      <section className=\"px-4 py-16 md:py-20 lg:py-24 w-full bg-background\">\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-4 md:mb-6 font-display text-foreground\">\n            Supporting Nigerian Business Growth\n          </h2>\n          <p className=\"text-center mb-12 md:mb-16 lg:mb-20 text-base md:text-lg lg:text-xl text-muted-foreground max-w-4xl mx-auto leading-relaxed\">\n            KudiScan aligns with Federal Government initiatives to drive economic development by providing businesses with the financial transparency and documentation needed for growth opportunities.\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10 lg:gap-12 max-w-6xl mx-auto\">\n            <div className=\"text-center p-6 rounded-2xl bg-card border border-border\">\n              <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4\" style={{backgroundColor: '#29A378'}}>\n                <Building className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-foreground\">Business Credit Readiness</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Generate comprehensive financial reports that meet Central Bank of Nigeria (CBN) lending requirements and help establish creditworthiness for SME development programs.\n              </p>\n            </div>\n            \n            <div className=\"text-center p-6 rounded-2xl bg-card border border-border\">\n              <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4\" style={{backgroundColor: '#29A378'}}>\n                <FileText className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-foreground\">Tax Compliance</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Maintain accurate expense records that support VAT filing, company income tax returns, and comply with Federal Inland Revenue Service (FIRS) digital documentation standards.\n              </p>\n            </div>\n            \n            <div className=\"text-center p-6 rounded-2xl bg-card border border-border\">\n              <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4\" style={{backgroundColor: '#29A378'}}>\n                <TrendingUp className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2 font-display text-foreground\">Economic Growth Support</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Support the National Economic Recovery and Growth Plan (ERGP) by providing transparent financial management tools that help Nigerian businesses scale and contribute to economic diversification.\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"text-center mt-12\">\n            <div className=\"max-w-2xl mx-auto p-6 rounded-2xl\" style={{backgroundColor: '#29A378'}}>\n              <h4 className=\"text-xl font-semibold mb-3 text-white\">Empowering Nigerian Businesses for the Future</h4>\n              <p className=\"text-white/90 text-sm leading-relaxed\">\n                KudiScan helps businesses build the financial foundation needed to access government intervention funds, participate in economic development programs, and meet regulatory requirements that drive sustainable growth across Nigeria's emerging sectors.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Integration Section */}\n      <section className=\"px-4 py-12 md:py-14 lg:py-16 w-full relative min-h-[250px] md:min-h-[300px] lg:min-h-[350px]\" style={{\n        background: `linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), \n                     url(\"https://images.pexels.com/photos/1148820/pexels-photo-1148820.jpeg?auto=compress&cs=tinysrgb&w=1920&h=1080&fit=crop\")`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}>\n        <div className=\"max-w-6xl mx-auto w-full flex flex-col justify-center h-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-3 md:mb-4 font-display text-white\">\n            KudiScan Integration Ecosystem\n          </h2>\n          <p className=\"text-center mb-8 md:mb-10 text-base md:text-lg text-white/90 max-w-3xl mx-auto\">\n            We connect with leading Nigerian and global platforms\n          </p>\n          \n          {/* Payment, Financial & Banking Platforms */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-xl md:text-2xl font-semibold mb-6 text-white text-center\">Payment, Financial & Banking Platforms</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-green-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-lg\">₦</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Paystack</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-orange-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">GTB</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">GTBank</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-blue-800 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">UBA</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">UBA</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-red-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">ZEN</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Zenith Bank</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Business & Productivity Tools */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-xl md:text-2xl font-semibold mb-6 text-white text-center\">Business & Productivity Tools</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">MS</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Microsoft 365</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-green-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">XL</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Excel</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-red-500 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">PDF</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Adobe PDF</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-purple-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">QB</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">QuickBooks</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Data Processing & Storage */}\n          <div>\n            <h3 className=\"text-xl md:text-2xl font-semibold mb-6 text-white text-center\">Data Processing & Storage</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">AWS</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Amazon Web Services</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">AZ</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Microsoft Azure</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">GC</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Google Cloud</p>\n              </div>\n              <div className=\"text-center p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <div className=\"w-12 h-12 bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white font-bold text-xs\">DB</span>\n                </div>\n                <p className=\"text-sm text-white font-medium\">Database Systems</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"px-4 py-16 w-full\" style={{backgroundColor: '#29A378'}}>\n        <div className=\"max-w-4xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-12 md:mb-16 lg:mb-20 font-display\" style={{color: '#E1E7EF'}}>\n            Frequently Asked Questions\n          </h2>\n          \n          <Accordion type=\"single\" collapsible className=\"space-y-4\">\n            <AccordionItem value=\"item-1\" className=\"rounded-2xl\" style={{backgroundColor: '#2D3339'}}>\n              <AccordionTrigger className=\"px-6 py-4 text-left\" style={{color: '#29A378'}}>\n                <span className=\"text-lg font-semibold\">Is KudiScan free?</span>\n              </AccordionTrigger>\n              <AccordionContent className=\"px-6 pb-4\" style={{color: '#E1E7EF'}}>\n                Yes, we offer a free plan for personal use with up to 10 receipt scans per month. For businesses and power users, our Premium plan starts at ₦3,000/month with unlimited scans, advanced reporting, and priority support.\n              </AccordionContent>\n            </AccordionItem>\n            \n            <AccordionItem value=\"item-2\" className=\"rounded-2xl\" style={{backgroundColor: '#2D3339'}}>\n              <AccordionTrigger className=\"px-6 py-4 text-left\" style={{color: '#29A378'}}>\n                <span className=\"text-lg font-semibold\">Will it work with Nigerian banks?</span>\n              </AccordionTrigger>\n              <AccordionContent className=\"px-6 pb-4\" style={{color: '#E1E7EF'}}>\n                Absolutely! KudiScan is specifically built for the Nigerian market. We integrate with major Nigerian banks including GTBank, First Bank, UBA, Zenith, and others. Our system understands Nigerian transaction formats, supports Naira currency natively, and handles local payment methods including mobile money and POS transactions.\n              </AccordionContent>\n            </AccordionItem>\n            \n            <AccordionItem value=\"item-3\" className=\"rounded-2xl\" style={{backgroundColor: '#2D3339'}}>\n              <AccordionTrigger className=\"px-6 py-4 text-left\" style={{color: '#29A378'}}>\n                <span className=\"text-lg font-semibold\">Is my data secure?</span>\n              </AccordionTrigger>\n              <AccordionContent className=\"px-6 pb-4\" style={{color: '#E1E7EF'}}>\n                Your security is our top priority. We use bank-grade 256-bit AES encryption, secure Nigerian data centers, and comply with international privacy standards. We never store your banking credentials - only transaction data that you explicitly choose to share. All data transmission is encrypted and we undergo regular security audits.\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"px-4 py-16 w-full\" style={{backgroundColor: '#2D3339'}}>\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-12 md:mb-16 lg:mb-20 font-display text-white\">\n            What <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-white\">Scan</span> Users Are Saying\n          </h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto\">\n            <div className=\"p-6 rounded-2xl hover:scale-105 transition-transform duration-300\" style={{backgroundColor: '#0C3124'}}>\n              <div className=\"flex items-center mb-3\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                ))}\n              </div>\n              <p className=\"text-lg mb-4 text-white break-words\">\n                \"KudiScan has saved me hours every week. No more manual tracking — my expenses just flow in.\"\n              </p>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-white/20 flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">C</span>\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">Chidinma</p>\n                  <p className=\"text-sm text-white/70\">Lagos entrepreneur</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-6 rounded-2xl hover:scale-105 transition-transform duration-300\" style={{backgroundColor: '#0C3124'}}>\n              <div className=\"flex items-center mb-3\">\n                {[...Array(4)].map((_, i) => (\n                  <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                ))}\n                <Star className=\"w-4 h-4 text-gray-300\" />\n              </div>\n              <p className=\"text-lg mb-4 text-white break-words\">\n                \"Before KudiScan, I lost track of small expenses. Now, I know exactly where my Naira goes.\"\n              </p>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-white/20 flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">T</span>\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">Tunde</p>\n                  <p className=\"text-sm text-white/70\">Freelancer</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-6 rounded-2xl hover:scale-105 transition-transform duration-300\" style={{backgroundColor: '#0C3124'}}>\n              <div className=\"flex items-center mb-3\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                ))}\n              </div>\n              <p className=\"text-lg mb-4 text-white break-words\">\n                \"KudiScan makes expense tracking incredibly easy! The interface is intuitive and the OCR accuracy is outstanding.\"\n              </p>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-white/20 flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">A</span>\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">Adebayo M.</p>\n                  <p className=\"text-sm text-white/70\">Small business owner</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"px-4 py-16 w-full\" style={{backgroundColor: '#22262A'}}>\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-4 md:mb-6 font-display\" style={{color: '#E1E7EF'}}>\n            Choose Plan\n          </h2>\n          <p className=\"text-center mb-12\" style={{color: '#959AA0'}}>\n            Start free and upgrade when you're ready to scale your finance management.\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {/* Freemium Plan */}\n            <div className=\"bg-card border border-border rounded-2xl p-6 md:p-8 relative\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2 font-display\" style={{color: '#E1E7EF'}}>Freemium</h3>\n                <div className=\"text-4xl font-bold mb-2\" style={{color: '#E1E7EF'}}>\n                  ₦0<span className=\"text-lg font-normal\" style={{color: '#959AA0'}}>/month</span>\n                </div>\n                <p style={{color: '#959AA0'}}>Perfect for getting started with expense tracking</p>\n              </div>\n              \n              <div className=\"space-y-3 mb-8\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Up to 10 receipt scans per month</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Basic expense categorization</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Simple spending reports</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Mobile app access</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Naira currency support</span>\n                </div>\n              </div>\n              \n              <div className=\"text-center\">\n                <Link href=\"/register\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"px-8\" style={{borderColor: '#29A378', color: '#29A378'}} data-testid=\"button-freemium-plan\">\n                    Get Started Free\n                  </Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Premium Plan */}\n            <div className=\"bg-card border-2 border-primary rounded-2xl p-6 md:p-8 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <span className=\"bg-primary text-white px-4 py-1 rounded-full text-sm font-semibold\">Most Popular</span>\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2 font-display\" style={{color: '#E1E7EF'}}>Premium</h3>\n                <div className=\"text-4xl font-bold mb-2\" style={{color: '#E1E7EF'}}>\n                  ₦3,000<span className=\"text-lg font-normal\" style={{color: '#959AA0'}}>/month</span>\n                </div>\n                <p className=\"text-sm mb-2\" style={{color: '#959AA0'}}>₦28,800/year - Save 20%</p>\n                <p style={{color: '#959AA0'}}>Complete finance management for individuals and businesses.</p>\n              </div>\n              \n              <div className=\"space-y-3 mb-8\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Unlimited receipt scans</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Advanced AI-powered categorization</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Professional expense reports & analytics</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Budget tracking & alerts</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Tax-ready financial reports</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Business loan application support</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✓</span>\n                  </div>\n                  <span style={{color: '#E1E7EF'}}>Priority email support</span>\n                </div>\n\n              </div>\n              \n              <div className=\"text-center\">\n                <Link href=\"/register\">\n                  <Button size=\"lg\" className=\"px-8 bg-primary hover:bg-primary/90\" data-testid=\"button-premium-plan\">\n                    Get Started\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </section>\n\n\n\n      {/* Footer CTA */}\n      <section className=\"px-4 py-16 bg-primary text-white w-full\">\n        <div className=\"max-w-2xl mx-auto text-center w-full\">\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6 font-display text-primary-foreground\">Start managing your expenses today</h2>\n          <p className=\"text-primary-foreground/80 mb-8\">\n            Join thousands of Nigerian users who trust <span className=\"text-primary-foreground\">Kudi</span><span className=\"text-primary-foreground\">Scan</span> for their expense tracking needs.\n          </p>\n          <Link href=\"/register\">\n            <Button size=\"lg\" variant=\"secondary\" className=\"px-8\" data-testid=\"button-footer-cta\">\n              Get Started Free\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"px-4 py-12 md:py-16 w-full bg-background border-t border-border\">\n        <div className=\"max-w-6xl mx-auto w-full\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 md:gap-8\">\n            {/* Company Info */}\n            <div className=\"col-span-2 md:col-span-1\">\n              <div className=\"flex items-center mb-4\">\n                <Bot className=\"w-12 h-12 text-primary mr-3\" />\n                <h3 className=\"text-lg font-bold font-display\">\n                  <span style={{color: '#29A378'}}>Kudi</span>\n                  <span className=\"text-white\">Scan</span>\n                </h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Your automated finance assistant for Nigerian businesses. Scan, track, and scale with confidence.\n              </p>\n              \n              {/* WhatsApp Support for visitors */}\n              <div className=\"mb-4\">\n                <WhatsAppBusiness \n                  trigger={\n                    <Button \n                      size=\"sm\" \n                      className=\"gap-2 w-fit px-3\" \n                      style={{ backgroundColor: '#25D366' }}\n                      data-testid=\"whatsapp-footer\"\n                    >\n                      <MessageCircle className=\"w-4 h-4\" />\n                      WhatsApp\n                    </Button>\n                  }\n                />\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <Link href=\"/privacy\" className=\"text-sm text-muted-foreground hover:text-primary\">Privacy</Link>\n                <Link href=\"/terms\" className=\"text-sm text-muted-foreground hover:text-primary\">Terms</Link>\n              </div>\n            </div>\n\n            {/* Product Links */}\n            <div>\n              <h4 className=\"text-sm font-semibold mb-4 text-foreground\">Product</h4>\n              <div className=\"space-y-2\">\n                <Link href=\"/features\" className=\"block text-sm text-muted-foreground hover:text-primary\">Features</Link>\n                <Link href=\"/pricing\" className=\"block text-sm text-muted-foreground hover:text-primary\">Pricing</Link>\n                <Link href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-primary\">Security</Link>\n                <Link href=\"/mobile\" className=\"block text-sm text-muted-foreground hover:text-primary\">Mobile App</Link>\n              </div>\n            </div>\n\n            {/* Resources */}\n            <div>\n              <h4 className=\"text-sm font-semibold mb-4 text-foreground\">Resources</h4>\n              <div className=\"space-y-2\">\n                <Link href=\"/help\" className=\"block text-sm text-muted-foreground hover:text-primary\">Help Center</Link>\n                <Link href=\"/blog\" className=\"block text-sm text-muted-foreground hover:text-primary\">Blog</Link>\n                <Link href=\"/api\" className=\"block text-sm text-muted-foreground hover:text-primary\">API Docs</Link>\n                <Link href=\"/status\" className=\"block text-sm text-muted-foreground hover:text-primary\">System Status</Link>\n              </div>\n            </div>\n\n            {/* Company */}\n            <div>\n              <h4 className=\"text-sm font-semibold mb-4 text-foreground\">Company</h4>\n              <div className=\"space-y-2\">\n                <Link href=\"/about\" className=\"block text-sm text-muted-foreground hover:text-primary\">About Us</Link>\n                <Link href=\"/careers\" className=\"block text-sm text-muted-foreground hover:text-primary\">Careers</Link>\n                <Link href=\"/contact\" className=\"block text-sm text-muted-foreground hover:text-primary\">Contact</Link>\n                <Link href=\"/press\" className=\"block text-sm text-muted-foreground hover:text-primary\">Press Kit</Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Section with Stylized Logo and Scroll to Top */}\n          <div className=\"mt-8 md:mt-12 pt-6 md:pt-8 border-t border-border relative\">\n            {/* 2-color KudiScan background - full width */}\n            <div className=\"absolute inset-0 w-full h-full flex items-center justify-center opacity-5 pointer-events-none overflow-hidden\">\n              <span className=\"text-[6rem] md:text-[8rem] lg:text-[10rem] font-bold whitespace-nowrap\">\n                <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-muted-foreground\">Scan</span>\n              </span>\n            </div>\n            \n            <div className=\"flex flex-col md:flex-row justify-between items-center relative z-10\">\n              <div className=\"mb-4 md:mb-0 text-center md:text-left\">\n                <p className=\"text-sm text-muted-foreground\">\n                  © 2025 <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-muted-foreground\">Scan</span>. © Powered by WebArtistry. All rights reserved.\n                </p>\n              </div>\n              \n              {/* Scroll to Top Arrow */}\n              <div className=\"flex items-center\">\n                <button \n                  onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n                  className=\"flex items-center justify-center w-10 h-10 rounded-full bg-primary text-white hover:bg-primary/90 transition-colors\"\n                  aria-label=\"Scroll to top\"\n                >\n                  <ChevronUp className=\"w-5 h-5 text-white\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":82450},"client/src/pages/login.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Loader2, Home, Bot } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const emailInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await apiRequest('/api/auth/login', 'POST', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been logged in successfully.\"\n      });\n      // Small delay to ensure auth state is updated\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  // Force proper styling for autocomplete\n  useEffect(() => {\n    const fixAutofillStyles = () => {\n      const emailInput = emailInputRef.current;\n      if (emailInput) {\n        // Get the computed styles for input fields to match password field\n        const inputBg = 'hsl(214, 32%, 91%)'; // Light mode input color\n        const inputBgDark = 'hsl(210, 12%, 26%)'; // Dark mode input color\n        const whiteTextColor = '#ffffff'; // Force white text\n        const foregroundColor = 'hsl(var(--foreground))';\n        \n        // Check if we're in dark mode\n        const isDark = document.documentElement.classList.contains('dark');\n        const bgColor = isDark ? inputBgDark : inputBg;\n        \n        // Apply styles with priority on white text for autocomplete\n        emailInput.style.setProperty('background-color', bgColor, 'important');\n        emailInput.style.setProperty('color', whiteTextColor, 'important');\n        emailInput.style.setProperty('background-image', 'none', 'important');\n        emailInput.style.setProperty('-webkit-box-shadow', `0 0 0 1000px ${bgColor} inset`, 'important');\n        emailInput.style.setProperty('-webkit-text-fill-color', whiteTextColor, 'important');\n        emailInput.style.setProperty('caret-color', whiteTextColor, 'important');\n      }\n    };\n\n    // Run immediately and set up interval to continuously override\n    fixAutofillStyles();\n    const interval = setInterval(fixAutofillStyles, 100);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-white to-secondary/10 flex items-center justify-center p-4 relative\">\n      {/* Visit Home Page Button - Responsive positioning */}\n      <div className=\"absolute top-4 left-4 sm:left-auto sm:right-4 z-10\">\n        <Link href=\"/\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"bg-gradient-to-br from-primary/10 via-white to-secondary/10 hover:bg-gradient-to-br hover:from-primary/15 hover:via-white hover:to-secondary/15 border-primary hover:border-primary shadow-md text-xs sm:text-sm px-2 sm:px-4 text-primary hover:text-primary\"\n            data-testid=\"button-visit-home\"\n          >\n            <Home className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Visit Home Page</span>\n            <span className=\"sm:hidden\">Home</span>\n          </Button>\n        </Link>\n      </div>\n      \n      <div className=\"max-w-md w-full mx-auto mt-8 sm:mt-0\">\n        {/* Logo Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n            <Bot className=\"w-16 h-16 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2 font-display\">\n            <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-white\">Scan</span>\n          </h1>\n          <p className=\"text-gray-600\">Track your expenses with ease</p>\n        </div>\n\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Sign In</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          data-testid=\"input-email\"\n                          autoComplete=\"email\"\n                          className=\"focus:ring-0 focus:ring-offset-0\"\n                          style={{ \n                            backgroundColor: 'hsl(214, 32%, 91%)',\n                            color: '#ffffff',\n                            backgroundImage: 'none',\n                            WebkitBoxShadow: '0 0 0 1000px hsl(214, 32%, 91%) inset',\n                            WebkitTextFillColor: '#ffffff',\n                            caretColor: '#ffffff'\n                          }}\n                          {...field}\n                          ref={(el) => {\n                            // Assign to our custom ref\n                            if (emailInputRef) {\n                              (emailInputRef as any).current = el;\n                            }\n                            // Also call the field's ref if it exists\n                            if (field.ref) field.ref(el);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            data-testid=\"input-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing In...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center mt-6\">\n              <p className=\"text-sm text-gray-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n                  Create Account\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-6\">\n          <p className=\"text-xs text-gray-500\">\n            By signing in, you agree to our Terms of Service and Privacy Policy\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9544},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { ArrowLeft, Camera, Edit, Save, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { user, isAdmin } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileData) => {\n      const response = await apiRequest('/api/auth/profile', 'PUT', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSave = (data: ProfileData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleCancel = () => {\n    form.reset();\n    setIsEditing(false);\n  };\n\n  const userDisplayName = user?.firstName && user?.lastName \n    ? `${user.firstName} ${user.lastName}` \n    : user?.email || \"User\";\n\n  return (\n    <div className=\"w-full bg-background min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/settings\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n            <h1 className=\"text-xl font-bold text-foreground\">\n              Profile\n            </h1>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsEditing(!isEditing)}\n            data-testid=\"button-edit-profile\"\n          >\n            {isEditing ? (\n              <X className=\"w-4 h-4 text-muted-foreground\" />\n            ) : (\n              <Edit className=\"w-4 h-4 text-muted-foreground\" />\n            )}\n          </Button>\n        </div>\n      </header>\n      \n      <main className=\"p-4 space-y-6\">\n        {/* Profile Picture Section */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center relative\">\n                  <span className=\"text-white text-3xl font-bold\">\n                    {userDisplayName.charAt(0).toUpperCase()}\n                  </span>\n                  {isAdmin && (\n                    <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-bold\">A</span>\n                    </div>\n                  )}\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"absolute -bottom-2 -right-2 w-8 h-8 rounded-full\"\n                  data-testid=\"button-change-avatar\"\n                  onClick={() => toast({ title: \"Avatar Change\", description: \"Avatar upload coming soon!\" })}\n                >\n                  <Camera className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-xl font-semibold text-foreground font-display\">\n                  {userDisplayName}\n                </h2>\n                <p className=\"text-muted-foreground\">{user?.email}</p>\n                {isAdmin && (\n                  <Badge variant=\"secondary\" className=\"mt-2\">\n                    Administrator\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Subscription Status Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Subscription Status</span>\n              <Badge variant={(user as any)?.subscriptionPlan === \"premium\" ? \"default\" : \"secondary\"} className={(user as any)?.subscriptionPlan === \"premium\" ? \"bg-primary\" : \"\"}>\n                {(user as any)?.subscriptionPlan === \"premium\" ? \"Premium\" : \"Freemium\"}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Monthly Scans Used</span>\n              <span className=\"text-sm font-mono\">\n                {(user as any)?.monthlyScansUsed || 0} / {(user as any)?.subscriptionPlan === \"premium\" ? \"Unlimited\" : \"10\"}\n              </span>\n            </div>\n            {(user as any)?.subscriptionPlan === \"freemium\" && parseInt((user as any)?.monthlyScansUsed || \"0\") >= 8 && (\n              <div className=\"flex items-center gap-2 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                <span className=\"text-xs text-yellow-700 dark:text-yellow-400\">\n                  {parseInt((user as any)?.monthlyScansUsed || \"0\") >= 10 \n                    ? \"Monthly limit reached. Upgrade to Premium for unlimited scans.\"\n                    : \"You're close to your monthly scan limit. Consider upgrading to Premium.\"\n                  }\n                </span>\n              </div>\n            )}\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"w-full\"\n              onClick={() => setLocation(\"/subscription\")}\n              data-testid=\"button-manage-subscription\"\n            >\n              Manage Subscription\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Profile Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-display\">Personal Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isEditing ? (\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSave)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex space-x-3 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1\"\n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"button-save-profile\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCancel}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">First Name</label>\n                  <p className=\"font-medium text-foreground\">\n                    {user?.firstName || \"Not set\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Last Name</label>\n                  <p className=\"font-medium text-foreground\">\n                    {user?.lastName || \"Not set\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Email</label>\n                  <p className=\"font-medium text-foreground\">\n                    {user?.email}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Member Since</label>\n                  <p className=\"font-medium text-foreground\">\n                    {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Recently'}\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-display\">Account Statistics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-3 bg-primary/10 rounded-lg\">\n                <p className=\"text-2xl font-bold text-foreground\">0</p>\n                <p className=\"text-sm text-muted-foreground\">Total Expenses</p>\n              </div>\n              <div className=\"text-center p-3 bg-secondary/10 rounded-lg\">\n                <p className=\"text-2xl font-bold text-foreground\">0</p>\n                <p className=\"text-sm text-muted-foreground\">Receipts Scanned</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":12342},"client/src/pages/register.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Loader2, Home, Bot } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerSchema, type RegisterData } from \"@shared/schema\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      isAdmin: false,\n      isActive: true,\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      const response = await apiRequest('/api/auth/register', 'POST', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({\n        title: \"Account Created!\",\n        description: \"Welcome to KudiScan. You have been logged in automatically.\"\n      });\n      // Small delay to ensure auth state is updated\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please check your information and try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  // Scroll to top when component loads\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-white to-secondary/10 flex items-center justify-center p-4 relative\">\n      {/* Visit Home Page Button - Responsive positioning */}\n      <div className=\"absolute top-4 left-4 sm:left-auto sm:right-4 z-10\">\n        <Link href=\"/\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"bg-gradient-to-br from-primary/10 via-white to-secondary/10 hover:bg-gradient-to-br hover:from-primary/15 hover:via-white hover:to-secondary/15 border-primary hover:border-primary shadow-md text-xs sm:text-sm px-2 sm:px-4 text-primary hover:text-primary\"\n            data-testid=\"button-visit-home\"\n          >\n            <Home className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Visit Home Page</span>\n            <span className=\"sm:hidden\">Home</span>\n          </Button>\n        </Link>\n      </div>\n      \n      <div className=\"max-w-md w-full\">\n        {/* Logo Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n            <Bot className=\"w-16 h-16 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2 font-display\">\n            <span style={{color: '#29A378'}}>Kudi</span><span className=\"text-white\">Scan</span>\n          </h1>\n          <p className=\"text-gray-600\">Start tracking your expenses today</p>\n        </div>\n\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Create Account</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"John\"\n                            data-testid=\"input-firstname\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Doe\"\n                            data-testid=\"input-lastname\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"john.doe@example.com\"\n                          data-testid=\"input-email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a strong password\"\n                            data-testid=\"input-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm your password\"\n                            data-testid=\"input-confirm-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Creating Account...\n                    </>\n                  ) : (\n                    \"Create Account\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center mt-6\">\n              <p className=\"text-sm text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                  Sign In\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-6\">\n          <p className=\"text-xs text-gray-500\">\n            By creating an account, you agree to our Terms of Service and Privacy Policy\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10277},"client/src/pages/reports.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { CategoryChart } from \"@/components/category-chart\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { TrendingUp, TrendingDown, Calendar, Target } from \"lucide-react\";\n\ninterface DashboardStats {\n  totalExpenses: number;\n  monthlyTotal: number;\n  weeklyTotal: number;\n  categoryTotals: Record<string, number>;\n}\n\nexport default function Reports() {\n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n        <Header title=\"Reports\" />\n        <div className=\"p-4 space-y-6\">\n          <div className=\"animate-pulse\">\n            {/* Report Cards */}\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  const currentMonth = new Date().toLocaleString('default', { month: 'long' });\n  const budgetLimit = 150000;\n  const budgetUsed = ((stats?.monthlyTotal || 0) / budgetLimit) * 100;\n  const avgDaily = (stats?.monthlyTotal || 0) / new Date().getDate();\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <Header title=\"Reports\" />\n      \n      <main className=\"pb-20\">\n        {/* Monthly Overview */}\n        <section className=\"p-4\">\n          <Card className=\"bg-primary text-white border-0\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                {currentMonth} Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-green-100\">Total Spent:</span>\n                  <span className=\"text-xl font-bold\" data-testid=\"text-monthly-total\">\n                    {formatNaira(stats?.monthlyTotal || 0)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-green-100\">Daily Average:</span>\n                  <span className=\"font-semibold\" data-testid=\"text-daily-average\">\n                    {formatNaira(avgDaily)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Budget Status */}\n        <section className=\"px-4 pb-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Target className=\"w-5 h-5 mr-2 text-primary\" />\n                Budget Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Budget Limit:</span>\n                  <span className=\"font-semibold\">{formatNaira(budgetLimit)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Used:</span>\n                  <span className={`font-semibold ${budgetUsed > 80 ? 'text-red-600' : 'text-primary'}`}>\n                    {budgetUsed.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"w-full h-3 bg-muted rounded-full overflow-hidden\">\n                  <div \n                    className={`h-full rounded-full transition-all ${\n                      budgetUsed > 80 ? 'bg-red-500' : budgetUsed > 60 ? 'bg-yellow-500' : 'bg-primary'\n                    }`}\n                    style={{ width: `${Math.min(100, budgetUsed)}%` }}\n                    data-testid=\"progress-budget-usage\"\n                  />\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Remaining:</span>\n                  <span className=\"font-semibold text-primary\">\n                    {formatNaira(Math.max(0, budgetLimit - (stats?.monthlyTotal || 0)))}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Weekly Comparison */}\n        <section className=\"px-4 pb-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-primary\" />\n                This Week vs Last Week\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">This Week:</span>\n                  <span className=\"font-semibold\" data-testid=\"text-this-week\">\n                    {formatNaira(stats?.weeklyTotal || 0)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Last Week:</span>\n                  <span className=\"font-semibold text-muted-foreground\">\n                    {formatNaira(0)} {/* Placeholder - would need historical data */}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-center p-3 bg-muted rounded-lg\">\n                  <TrendingUp className=\"w-4 h-4 text-primary mr-1\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    Tracking spending patterns\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Category Breakdown */}\n        {stats?.categoryTotals && Object.keys(stats.categoryTotals).length > 0 && (\n          <section className=\"px-4 pb-4\">\n            <CategoryChart categoryTotals={stats.categoryTotals} />\n          </section>\n        )}\n\n        {/* Insights */}\n        <section className=\"px-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">💡 Insights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {budgetUsed > 80 && (\n                <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <p className=\"text-sm text-red-800 font-medium\">Budget Alert</p>\n                  <p className=\"text-xs text-red-600 mt-1\">\n                    You've used {budgetUsed.toFixed(0)}% of your monthly budget\n                  </p>\n                </div>\n              )}\n              \n              {avgDaily > 5000 && (\n                <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <p className=\"text-sm text-yellow-800 font-medium\">High Daily Spending</p>\n                  <p className=\"text-xs text-yellow-600 mt-1\">\n                    Your daily average of {formatNaira(avgDaily)} is above ₦5,000\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"p-3 rounded-lg\" style={{backgroundColor: '#24292E'}}>\n                <p className=\"text-sm font-medium\" style={{color: '#E1E7EF'}}>Track More</p>\n                <p className=\"text-xs mt-1\" style={{color: '#A1A7AE'}}>\n                  Scan more receipts to get better insights into your spending patterns\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":8253},"client/src/pages/settings.tsx":{"content":"import { useEffect } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSettings } from \"@/hooks/use-settings\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FeedbackModal } from \"@/components/feedback-modal\";\nimport { WhatsAppBusiness } from \"@/components/whatsapp-business\";\nimport { \n  User, \n  Bell, \n  Shield, \n  HelpCircle, \n  Info, \n  LogOut,\n  Camera,\n  Moon,\n  Download,\n  Crown,\n  Loader2,\n  IndianRupee,\n  MessageCircle\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user, isAdmin, logout, isLoggingOut } = useAuth();\n  const { settings, togglePushNotifications, toggleDarkMode, toggleAutoCapture } = useSettings();\n  const { toast } = useToast();\n\n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const handlePushNotificationToggle = async () => {\n    const result = await togglePushNotifications();\n    if (!result && !settings.pushNotifications) {\n      toast({\n        title: \"Notification Permission\",\n        description: \"Please allow notifications in your browser settings to enable push notifications.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    if (window.confirm(\"Are you sure you want to log out?\")) {\n      logout();\n    }\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Data\",\n      description: \"Data export feature coming soon!\",\n    });\n  };\n\n\n\n  const handleAbout = () => {\n    toast({\n      title: \"About KudiScan v1.0.0\",\n      description: \"Your smart expense tracker designed for Nigerian SMEs.\\n\\nMission:\\nAutomate expense tracking to save business owners time and improve financial decisions.\\n\\nVision:\\nTo be the leading financial management platform for African businesses.\\n\\nGoals:\\n• Help SMEs achieve 70% reduction in bookkeeping time\\n• Support 10,000+ businesses in securing loans through better financial records\\n• Expand across West Africa by 2026\",\n    });\n  };\n\n\n\n  const userDisplayName = user?.firstName && user?.lastName \n    ? `${user.firstName} ${user.lastName}` \n    : user?.email || \"User\";\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <Header title=\"Settings\" />\n      \n      <main className=\"pb-20\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6 p-4\">\n        {/* Profile Section */}\n        <section className=\"lg:col-span-2\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center relative\">\n                  <User className=\"w-8 h-8 text-white\" />\n                  {isAdmin && (\n                    <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center\">\n                      <Crown className=\"w-3 h-3 text-white\" />\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h3 className=\"font-semibold text-lg\">{userDisplayName}</h3>\n                    {isAdmin && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Admin\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{user?.email}</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    Member since {user?.createdAt ? new Date(user.createdAt).getFullYear() : 'recently'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* App Settings */}\n        <section className=\"col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">App Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Bell className=\"w-6 h-6 text-primary\" />\n                  <div>\n                    <p className=\"font-medium text-primary\">Push Notifications</p>\n                    <p className=\"text-sm text-primary/70\">Get notified about budget alerts</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={settings.pushNotifications}\n                  onCheckedChange={handlePushNotificationToggle}\n                  data-testid=\"switch-notifications\" \n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Moon className=\"w-6 h-6 text-primary\" />\n                  <div>\n                    <p className=\"font-medium text-primary\">Dark Mode</p>\n                    <p className=\"text-sm text-primary/70\">Switch to dark theme</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={settings.darkMode}\n                  onCheckedChange={toggleDarkMode}\n                  data-testid=\"switch-dark-mode\" \n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Camera className=\"w-6 h-6 text-primary\" />\n                  <div>\n                    <p className=\"font-medium text-primary\">Auto-Capture</p>\n                    <p className=\"text-sm text-primary/70\">Automatically detect receipts</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={settings.autoCapture}\n                  onCheckedChange={toggleAutoCapture}\n                  data-testid=\"switch-auto-capture\" \n                />\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Budget Settings */}\n        <section className=\"col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Budget Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 p-4\">\n              <Link href=\"/budget-settings\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-budget-settings\"\n                >\n                  <div className=\"w-6 h-6 mr-3 text-primary flex items-center justify-center font-bold text-lg\">₦</div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Budget Settings</p>\n                    <p className=\"text-sm text-primary/70\">Set monthly budgets</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Link href=\"/expense-categories\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-expense-categories\"\n                >\n                  <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                    <Crown className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Expense Categories</p>\n                    <p className=\"text-sm text-primary/70\">Manage expense categories</p>\n                  </div>\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Data & Privacy */}\n        <section className=\"col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Data & Privacy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 p-4\">\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start px-4 py-3 h-auto\"\n                onClick={handleExportData}\n                data-testid=\"button-export-data\"\n              >\n                <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                  <Download className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-medium text-primary\">Export Data</p>\n                  <p className=\"text-sm text-primary/70\">Download your expense data</p>\n                </div>\n              </Button>\n              \n              <Link href=\"/privacy-settings\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-privacy-settings\"\n                >\n                  <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                    <Shield className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Privacy Settings</p>\n                    <p className=\"text-sm text-primary/70\">Control your data usage</p>\n                  </div>\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Support & Help */}\n        <section className=\"col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Support & Help</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 p-4\">\n              <Link href=\"/help-center\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-help-center\"\n                >\n                  <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                    <HelpCircle className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Help Center</p>\n                    <p className=\"text-sm text-primary/70\">FAQs and tutorials</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Link href=\"/contact-support\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-contact-support\"\n                >\n                  <div className=\"w-6 h-6 mr-3 bg-primary/10 rounded flex items-center justify-center\">\n                    <span className=\"text-primary text-sm font-bold\">@</span>\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Contact Support</p>\n                    <p className=\"text-sm text-primary/70\">Get help from our team</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start px-4 py-3 h-auto\"\n                onClick={handleAbout}\n                data-testid=\"button-about\"\n              >\n                <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                  <Info className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-medium text-primary\">About KudiScan</p>\n                  <p className=\"text-sm text-primary/70\">Version 1.0.0</p>\n                </div>\n              </Button>\n              \n              {/* Feedback and WhatsApp Support */}\n              <div className=\"flex gap-2 justify-center\">\n                <FeedbackModal \n                  trigger={\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"w-fit px-3\"\n                      data-testid=\"button-feedback\"\n                    >\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      Feedback\n                    </Button>\n                  }\n                />\n                \n                <WhatsAppBusiness \n                  trigger={\n                    <Button \n                      size=\"sm\"\n                      className=\"w-fit px-3\" \n                      style={{ backgroundColor: '#25D366' }}\n                      data-testid=\"button-whatsapp-support\"\n                    >\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      WhatsApp\n                    </Button>\n                  }\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Subscription Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Subscription</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 p-4\">\n              <Link href=\"/subscription\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start px-4 py-3 h-auto\"\n                  data-testid=\"button-subscription\"\n                >\n                  <div className=\"w-6 h-6 mr-3 flex items-center justify-center\">\n                    <Crown className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-primary\">Manage Subscription</p>\n                    <p className=\"text-sm text-primary/70\">Billing & plan details</p>\n                  </div>\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Admin Section */}\n\n\n        </div>\n        {/* Sign Out */}\n        <section className=\"lg:col-span-2 flex justify-center\">\n          <Button \n            className=\"w-auto bg-red-500 text-white py-4 px-6 rounded-xl font-semibold hover:bg-red-600 shadow-lg\"\n            onClick={handleLogout}\n            disabled={isLoggingOut}\n            data-testid=\"button-sign-out\"\n          >\n            {isLoggingOut ? (\n              <>\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                Signing Out...\n              </>\n            ) : (\n              <>\n                <LogOut className=\"w-5 h-5 mr-2\" />\n                Sign Out\n              </>\n            )}\n          </Button>\n        </section>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":15209},"client/src/pages/transactions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { ExpenseCard } from \"@/components/expense-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { EXPENSE_CATEGORIES } from \"@/lib/categories\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { type Expense } from \"@shared/schema\";\n\nexport default function Transactions() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [dateFilter, setDateFilter] = useState<string>(\"all\");\n\n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const { data: expenses = [], isLoading } = useQuery<Expense[]>({\n    queryKey: ['/api/expenses']\n  });\n\n  const filteredExpenses = expenses.filter(expense => {\n    if (selectedCategory !== \"all\" && expense.category !== selectedCategory) {\n      return false;\n    }\n    \n    if (dateFilter !== \"all\") {\n      const expenseDate = new Date(expense.date);\n      const now = new Date();\n      \n      switch (dateFilter) {\n        case \"today\":\n          return expenseDate.toDateString() === now.toDateString();\n        case \"week\":\n          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          return expenseDate >= weekAgo;\n        case \"month\":\n          return expenseDate.getMonth() === now.getMonth() && \n                 expenseDate.getFullYear() === now.getFullYear();\n        default:\n          return true;\n      }\n    }\n    \n    return true;\n  });\n\n  const totalFiltered = filteredExpenses.reduce((sum, expense) => \n    sum + parseFloat(expense.amount), 0\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n        <Header title=\"Transactions\" />\n        <div className=\"p-4\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <Header title=\"Transactions\" />\n      \n      <main className=\"pb-20\">\n        {/* Summary Card */}\n        <section className=\"p-4\">\n          <Card className=\"bg-primary text-white border-0\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-green-100 text-sm\">\n                  {selectedCategory === \"all\" ? \"Total\" : \n                   EXPENSE_CATEGORIES.find(cat => cat.id === selectedCategory)?.name || selectedCategory} \n                  {\" \"}Expenses\n                </p>\n                <h2 className=\"text-2xl font-bold mt-1\" data-testid=\"text-filtered-total\">\n                  {formatNaira(totalFiltered)}\n                </h2>\n                <p className=\"text-green-100 text-xs mt-1\">\n                  {filteredExpenses.length} transaction{filteredExpenses.length !== 1 ? 's' : ''}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Filters */}\n        <section className=\"px-4 pb-4\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-muted-foreground mb-1\">\n                Category\n              </label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {EXPENSE_CATEGORIES.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-muted-foreground mb-1\">\n                Time Period\n              </label>\n              <Select value={dateFilter} onValueChange={setDateFilter}>\n                <SelectTrigger data-testid=\"select-date-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </section>\n\n        {/* Transactions List */}\n        <section className=\"px-4\">\n          {filteredExpenses.length > 0 ? (\n            <div className=\"space-y-3\">\n              {filteredExpenses.map((expense) => (\n                <ExpenseCard key={expense.id} expense={expense} />\n              ))}\n            </div>\n          ) : (\n            <Card className=\"border-dashed border-2 border-border\">\n              <CardContent className=\"p-8 text-center\">\n                <i className=\"fas fa-receipt text-4xl text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground mb-2\">No transactions found</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {selectedCategory !== \"all\" || dateFilter !== \"all\" \n                    ? \"Try adjusting your filters\" \n                    : \"Scan your first receipt to get started\"\n                  }\n                </p>\n                {(selectedCategory !== \"all\" || dateFilter !== \"all\") && (\n                  <Button \n                    onClick={() => {\n                      setSelectedCategory(\"all\");\n                      setDateFilter(\"all\");\n                    }}\n                    variant=\"outline\"\n                    className=\"mt-4\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear Filters\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </section>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":6720},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }","size_bytes":314},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3855},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }","size_bytes":260},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/budget-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Save, Target } from \"lucide-react\";\nimport { formatNaira } from \"@/lib/currency\";\n\nexport default function BudgetSettings() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [monthlyBudget, setMonthlyBudget] = useState(\"5000000\");\n  const [categoryBudgets, setCategoryBudgets] = useState({\n    food: \"120000\",\n    transport: \"80000\",\n    utilities: \"60000\",\n    entertainment: \"50000\",\n    healthcare: \"40000\",\n    shopping: \"30000\"\n  });\n\n  // Calculate spent amounts for budget remaining (mock data for now)\n  const spentAmounts = {\n    food: 35000,\n    transport: 20000,\n    utilities: 28000,\n    entertainment: 12000,\n    healthcare: 8000,\n    shopping: 15000\n  };\n\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const handleSave = () => {\n    toast({\n      title: \"Budget Saved\",\n      description: \"Your budget settings have been updated successfully.\",\n    });\n  };\n\n  // Calculate cumulative remaining budget\n  const calculateCumulativeRemaining = (currentCategory: string) => {\n    const totalMonthly = parseInt(monthlyBudget) || 0;\n    let totalAllocated = 0;\n    \n    // Sum all category budgets including the current one being displayed\n    Object.entries(categoryBudgets).forEach(([category, amount]) => {\n      totalAllocated += parseInt(amount) || 0;\n    });\n    \n    return Math.max(0, totalMonthly - totalAllocated);\n  };\n\n  const handleReset = () => {\n    setMonthlyBudget(\"5000000\");\n    setCategoryBudgets({\n      food: \"120000\",\n      transport: \"80000\", \n      utilities: \"60000\",\n      entertainment: \"50000\",\n      healthcare: \"40000\",\n      shopping: \"30000\"\n    });\n    toast({\n      title: \"Budget Reset\",\n      description: \"Budget settings have been reset to defaults.\",\n    });\n  };\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/settings\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n            <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n              Budget Settings\n            </h1>\n          </div>\n        </div>\n      </header>\n      \n      <main className=\"pb-20 p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6\">\n          {/* Monthly Budget */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Target className=\"w-5 h-5 mr-2 text-primary\" />\n                Monthly Budget Limit\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"monthly-budget\">Set your monthly spending limit</Label>\n                  <div className=\"flex items-center mt-2\">\n                    <span className=\"text-2xl mr-2\">₦</span>\n                    <Input\n                      id=\"monthly-budget\"\n                      type=\"text\"\n                      value={monthlyBudget}\n                      onChange={(e) => setMonthlyBudget(e.target.value.replace(/[^0-9]/g, ''))}\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"input-monthly-budget\"\n                    />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Current limit: {formatNaira(parseInt(monthlyBudget) || 0)}\n                  </p>\n                  <p className=\"text-sm text-primary font-medium mt-1\">\n                    Total Remaining: {formatNaira(calculateCumulativeRemaining(''))}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category Budgets */}\n          {Object.entries(categoryBudgets).map(([category, amount]) => (\n            <Card key={category}>\n              <CardHeader>\n                <CardTitle className=\"capitalize\">\n                  {category}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Label htmlFor={`budget-${category}`}>Monthly limit</Label>\n                  <div className=\"flex items-center\">\n                    <span className=\"mr-2\">₦</span>\n                    <Input\n                      id={`budget-${category}`}\n                      type=\"text\"\n                      value={amount}\n                      onChange={(e) => setCategoryBudgets(prev => ({\n                        ...prev,\n                        [category]: e.target.value.replace(/[^0-9]/g, '')\n                      }))}\n                      data-testid={`input-budget-${category}`}\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatNaira(parseInt(amount) || 0)}\n                  </p>\n                  <p className=\"text-xs text-primary font-medium\">\n                    Budget Remaining: {formatNaira(calculateCumulativeRemaining(category))}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-2 gap-4 mt-6\">\n          <Button \n            variant=\"outline\" \n            className=\"w-auto\"\n            onClick={handleReset}\n            data-testid=\"button-reset-budget\"\n          >\n            Reset to Defaults\n          </Button>\n          <Button \n            onClick={handleSave}\n            className=\"w-auto bg-primary hover:bg-primary/90\"\n            data-testid=\"button-save-budget\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Settings\n          </Button>\n        </div>\n        </div>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":6811},"client/src/pages/subscription.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Check, Crown, CreditCard, Calendar, AlertCircle } from \"lucide-react\";\nimport FullScreenSkeleton from \"@/components/FullScreenSkeleton\";\n\nexport default function Subscription() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [subscriptionInfo, setSubscriptionInfo] = useState<any>(null);\n\n  useEffect(() => {\n    fetchSubscriptionInfo();\n    // Scroll to top when page loads\n    window.scrollTo({ top: 0, behavior: 'instant' });\n    \n    // Check if returning from Paystack payment\n    const urlParams = new URLSearchParams(window.location.search);\n    const reference = urlParams.get('reference');\n    if (reference) {\n      verifyPayment(reference);\n    }\n  }, []);\n\n  const fetchSubscriptionInfo = async () => {\n    try {\n      const response = await fetch(\"/api/subscription/info\");\n      const data = await response.json();\n      setSubscriptionInfo(data);\n    } catch (error) {\n      console.error(\"Failed to fetch subscription info:\", error);\n    }\n  };\n\n  const verifyPayment = async (reference: string) => {\n    try {\n      const response = await apiRequest(\"/api/subscription/activate\", \"POST\", { reference });\n      const data = await response.json();\n      \n      toast({\n        title: \"Payment Successful!\",\n        description: data.message || \"Your subscription has been activated\",\n      });\n      \n      // Force refresh both auth and subscription data immediately and with delays\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      fetchSubscriptionInfo();\n      \n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        fetchSubscriptionInfo();\n      }, 1000);\n      \n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        fetchSubscriptionInfo();\n      }, 2000);\n      \n      // Clean up URL\n      window.history.replaceState({}, '', '/subscription');\n    } catch (error) {\n      toast({\n        title: \"Payment Verification Failed\",\n        description: \"Please contact support if payment was deducted\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const [loadingPlan, setLoadingPlan] = useState<string | null>(null);\n\n  const handleUpgrade = async (planType: 'monthly' | 'yearly' = 'yearly') => {\n    setLoadingPlan(planType);\n    try {\n      const response = await apiRequest(\"/api/subscription/create\", \"POST\", { planType });\n      const data = await response.json();\n      \n      if (data.checkoutUrl) {\n        window.location.href = data.checkoutUrl;\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create checkout session\",\n          variant: \"destructive\",\n        });\n        setLoadingPlan(null);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upgrade subscription\",\n        variant: \"destructive\",\n      });\n      setLoadingPlan(null);\n    }\n  };\n\n  const handleCancelSubscription = async () => {\n    if (!confirm(\"Are you sure you want to cancel your subscription? You'll lose access to premium features at the end of your billing period.\")) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await apiRequest(\"/api/subscription/cancel\", \"POST\");\n      toast({\n        title: \"Subscription Cancelled\",\n        description: \"Your subscription has been cancelled. You'll retain access until your current period ends.\",\n      });\n      // Force refresh auth data and subscription info\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      fetchSubscriptionInfo();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to cancel subscription\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Use subscription info for display, fallback to user data\n  const isPremium = subscriptionInfo?.subscriptionPlan === \"premium\" || (user as any)?.subscriptionPlan === \"premium\";\n  const scansUsed = subscriptionInfo?.monthlyScansUsed ?? parseInt((user as any)?.monthlyScansUsed || \"0\");\n  const scansLimit = subscriptionInfo?.scansLimit ?? (isPremium ? -1 : 10);\n\n  // Show skeleton while auth is loading or subscription info is not yet available\n  if (authLoading || !subscriptionInfo) {\n    return <FullScreenSkeleton />;\n  }\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto bg-background min-h-screen\">\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/settings\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n            <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n              Subscription\n            </h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"pb-20 p-4 space-y-6\">\n        {/* Current Plan */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {isPremium ? <Crown className=\"w-5 h-5 text-primary\" /> : <CreditCard className=\"w-5 h-5 text-muted-foreground\" />}\n              Current Plan\n            </CardTitle>\n            <CardDescription>\n              Your current subscription status and usage\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Plan</span>\n              <Badge variant={isPremium ? \"default\" : \"secondary\"} className={isPremium ? \"bg-primary\" : \"\"}>\n                {isPremium ? \"Premium\" : \"Freemium\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Status</span>\n              <Badge variant={subscriptionInfo?.subscriptionStatus === \"active\" ? \"default\" : \n                              subscriptionInfo?.subscriptionStatus === \"canceled\" ? \"destructive\" : \"secondary\"}>\n                {subscriptionInfo?.subscriptionStatus === \"active\" ? \"Active\" :\n                 subscriptionInfo?.subscriptionStatus === \"canceled\" ? \"Cancelled\" : \"Freemium\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Monthly Scans Used</span>\n              <span className=\"font-mono\">\n                {scansUsed} / {scansLimit === -1 ? \"Unlimited\" : scansLimit}\n              </span>\n            </div>\n\n\n\n            {subscriptionInfo?.subscriptionEndDate && (\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium\">Next Billing Date</span>\n                <span className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  {new Date(subscriptionInfo.subscriptionEndDate).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n\n            {!isPremium && scansUsed >= scansLimit && (\n              <div className=\"flex items-center gap-2 p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                <AlertCircle className=\"w-5 h-5 text-destructive\" />\n                <span className=\"text-sm text-destructive\">\n                  You've reached your monthly scan limit. Upgrade to Premium for unlimited scans.\n                </span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Pricing Comparison */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Freemium Plan */}\n          <Card className={!isPremium ? \"border-primary\" : \"\"}>\n            <CardHeader>\n              <CardTitle>Freemium</CardTitle>\n              <CardDescription>Perfect for getting started</CardDescription>\n              <div className=\"text-3xl font-bold\">{formatNaira(0)}<span className=\"text-sm font-normal text-muted-foreground\">/month</span></div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Up to 10 receipt scans per month</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Basic expense categorization</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Simple spending reports</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Mobile app access</span>\n              </div>\n              {isPremium && (\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={handleCancelSubscription}\n                  disabled={loading}\n                >\n                  Downgrade to Freemium\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Premium Plan */}\n          <Card className={isPremium ? \"border-primary bg-primary/5\" : \"\"}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Crown className=\"w-5 h-5 text-primary\" />\n                Premium\n              </CardTitle>\n              <CardDescription>Complete finance management</CardDescription>\n              <div className=\"text-3xl font-bold\">{formatNaira(3000)}<span className=\"text-sm font-normal text-muted-foreground\">/month</span></div>\n              <div className=\"text-sm text-muted-foreground\">{formatNaira(28800)}/year - Save 20%</div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Unlimited receipt scans</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Advanced AI-powered categorization</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Professional expense reports</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Budget tracking & alerts</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Business loan application support</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm\">Priority email support</span>\n              </div>\n              {!isPremium && (\n                <div className=\"space-y-2\">\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90\"\n                    onClick={() => handleUpgrade('monthly')}\n                    disabled={loadingPlan === 'monthly'}\n                    data-testid=\"button-upgrade-monthly\"\n                  >\n                    <Crown className=\"w-4 h-4 mr-2\" />\n                    {loadingPlan === 'monthly' ? \"Processing...\" : `Get Monthly - ${formatNaira(3000)}/month`}\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    className=\"w-full border-primary text-primary hover:bg-primary/10\"\n                    onClick={() => handleUpgrade('yearly')}\n                    disabled={loadingPlan === 'yearly'}\n                    data-testid=\"button-upgrade-yearly\"\n                  >\n                    <Crown className=\"w-4 h-4 mr-2\" />\n                    {loadingPlan === 'yearly' ? \"Processing...\" : `Get Yearly - ${formatNaira(28800)}/year`}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Billing Information */}\n        {isPremium && subscriptionInfo && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Billing Information</CardTitle>\n              <CardDescription>Manage your billing and payment methods</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {subscriptionInfo.paymentMethod && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">Payment Method</span>\n                  <span className=\"flex items-center gap-2\">\n                    <CreditCard className=\"w-4 h-4\" />\n                    **** **** **** {subscriptionInfo.paymentMethod.last4}\n                  </span>\n                </div>\n              )}\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"font-medium\">Renew Subscription</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Extend your premium access with the same plan\n                  </p>\n                </div>\n                <Button \n                  className=\"bg-primary hover:bg-primary/90\"\n                  onClick={() => handleUpgrade('monthly')}\n                  disabled={loadingPlan !== null}\n                  data-testid=\"button-renew-subscription\"\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  {loadingPlan ? \"Processing...\" : \"Renew\"}\n                </Button>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"font-medium\">Cancel Subscription</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    You'll retain access until your current billing period ends\n                  </p>\n                </div>\n                <Button \n                  variant=\"destructive\" \n                  onClick={handleCancelSubscription}\n                  disabled={loading}\n                  data-testid=\"button-cancel-subscription\"\n                >\n                  {loading ? \"Cancelling...\" : \"Cancel Subscription\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":15800},"client/src/pages/paystack-checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, CheckCircle, ArrowLeft, CreditCard, Building2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { formatNaira } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PaystackCheckout() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleUpgrade = async () => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/subscription/create\");\n      const data = await response.json();\n      \n      if (data.checkoutUrl) {\n        // Redirect to Paystack checkout\n        window.location.href = data.checkoutUrl;\n      } else {\n        throw new Error(data.message || \"Failed to create checkout session\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: error instanceof Error ? error.message : \"Failed to start payment process\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur\">\n        <div className=\"flex h-14 items-center justify-between px-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-xl font-bold text-foreground\">\n            Upgrade to Premium\n          </h1>\n          <div></div>\n        </div>\n      </header>\n\n      <main className=\"p-4 space-y-6 max-w-2xl mx-auto\">\n        {/* Premium Plan Card */}\n        <Card className=\"border-primary/20\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n              <Crown className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl\">KudiScan Premium</CardTitle>\n            <CardDescription>\n              Unlock unlimited scanning and advanced features for your business\n            </CardDescription>\n            <div className=\"text-center mt-4\">\n              <div className=\"text-4xl font-bold text-foreground\">\n                {formatNaira(28800)}\n                <span className=\"text-lg text-muted-foreground font-normal\">/year</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Save 20% compared to monthly billing\n              </p>\n              <Badge variant=\"secondary\" className=\"mt-2\">\n                Only {formatNaira(2400)} per month\n              </Badge>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {/* Features List */}\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-foreground\">What's included:</h3>\n              \n              <div className=\"space-y-2\">\n                {[\n                  \"Unlimited receipt scans\",\n                  \"Advanced AI categorization\",\n                  \"Professional expense reports\",\n                  \"Budget tracking & alerts\",\n                  \"Business loan application support\",\n                  \"Priority email support\",\n                  \"Export to Excel/PDF\",\n                  \"Tax-ready financial reports\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                    <span className=\"text-sm text-foreground\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Payment Methods */}\n            <div className=\"border-t pt-6\">\n              <h3 className=\"font-semibold text-foreground mb-3\">Secure Payment Options:</h3>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"flex items-center gap-2 p-3 bg-muted/50 rounded-lg\">\n                  <Building2 className=\"w-5 h-5 text-primary\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Bank Transfer</p>\n                    <p className=\"text-muted-foreground text-xs\">All Nigerian banks</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 p-3 bg-muted/50 rounded-lg\">\n                  <CreditCard className=\"w-5 h-5 text-primary\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Debit Card</p>\n                    <p className=\"text-muted-foreground text-xs\">Visa, Mastercard, Verve</p>\n                  </div>\n                </div>\n              </div>\n              \n              <p className=\"text-xs text-muted-foreground mt-3 text-center\">\n                Powered by Paystack - Secure, PCI-compliant payments\n                <br />\n                Optimized for Nigerian businesses with local payment methods\n              </p>\n            </div>\n\n            {/* Action Button */}\n            <Button \n              onClick={handleUpgrade}\n              disabled={isLoading}\n              size=\"lg\"\n              className=\"w-full bg-primary hover:bg-primary/90\"\n              data-testid=\"button-upgrade-premium\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Crown className=\"w-5 h-5 mr-2\" />\n                  Upgrade to Premium - {formatNaira(28800)}\n                </>\n              )}\n            </Button>\n\n            <p className=\"text-xs text-muted-foreground text-center\">\n              Billed annually. Cancel anytime. \n              <br />\n              Your subscription will be active immediately after payment.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <CheckCircle className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n              </div>\n              <div className=\"text-sm\">\n                <p className=\"font-medium text-foreground\">Secure & Trusted</p>\n                <p className=\"text-muted-foreground\">\n                  Your payment is protected by bank-grade security. We never store your card details.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":7339},"client/src/components/FullScreenSkeleton.tsx":{"content":"import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function FullScreenSkeleton() {\n  return (\n    <div className=\"w-full max-w-4xl mx-auto bg-background min-h-screen\">\n      {/* Header Skeleton */}\n      <div className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Skeleton className=\"w-10 h-10\" />\n            <Skeleton className=\"w-32 h-6\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Skeleton */}\n      <main className=\"pb-20 p-4 space-y-6\">\n        {/* Large Card Skeleton */}\n        <div className=\"bg-card border rounded-lg p-6 space-y-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"w-40 h-6\" />\n            <Skeleton className=\"w-64 h-4\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <Skeleton className=\"w-16 h-4\" />\n              <Skeleton className=\"w-20 h-6\" />\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <Skeleton className=\"w-16 h-4\" />\n              <Skeleton className=\"w-24 h-4\" />\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <Skeleton className=\"w-32 h-4\" />\n              <Skeleton className=\"w-16 h-4\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Two Column Cards */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* First Card */}\n          <div className=\"bg-card border rounded-lg p-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"w-24 h-6\" />\n              <Skeleton className=\"w-40 h-4\" />\n              <Skeleton className=\"w-20 h-8\" />\n            </div>\n            <div className=\"space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"flex items-center gap-2\">\n                  <Skeleton className=\"w-4 h-4\" />\n                  <Skeleton className=\"w-48 h-4\" />\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Second Card */}\n          <div className=\"bg-card border rounded-lg p-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"w-24 h-6\" />\n              <Skeleton className=\"w-40 h-4\" />\n              <Skeleton className=\"w-20 h-8\" />\n            </div>\n            <div className=\"space-y-2\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"flex items-center gap-2\">\n                  <Skeleton className=\"w-4 h-4\" />\n                  <Skeleton className=\"w-48 h-4\" />\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-2\">\n              <Skeleton className=\"w-full h-10\" />\n              <Skeleton className=\"w-full h-10\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Additional Card Skeleton */}\n        <div className=\"bg-card border rounded-lg p-6 space-y-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"w-32 h-6\" />\n            <Skeleton className=\"w-56 h-4\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <Skeleton className=\"w-24 h-4\" />\n              <Skeleton className=\"w-32 h-4\" />\n            </div>\n            <Skeleton className=\"w-full h-px\" />\n            <div className=\"flex justify-between items-center\">\n              <div className=\"space-y-1\">\n                <Skeleton className=\"w-32 h-4\" />\n                <Skeleton className=\"w-48 h-3\" />\n              </div>\n              <Skeleton className=\"w-20 h-8\" />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":3927},"client/src/pages/help-center.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ArrowLeft, Search, ChevronDown, HelpCircle, MessageCircle, Mail, Phone } from \"lucide-react\";\n\nconst faqs = [\n  {\n    question: \"How do I scan a receipt?\",\n    answer: \"Tap the camera button on your dashboard, point your camera at the receipt, and tap the capture button. Our OCR technology will automatically extract the expense details.\"\n  },\n  {\n    question: \"Can I edit scanned expenses?\",\n    answer: \"Yes! After scanning, you can review and edit all details including amount, merchant, category, and date before saving the expense.\"\n  },\n  {\n    question: \"How accurate is the OCR scanning?\",\n    answer: \"Our OCR technology achieves 95%+ accuracy for clear receipts. For best results, ensure good lighting and keep the receipt flat when scanning.\"\n  },\n  {\n    question: \"Can I set budget limits?\",\n    answer: \"Yes! Go to Settings > Budget Settings to set monthly limits for your overall budget and individual categories.\"\n  },\n  {\n    question: \"How do I export my expense data?\",\n    answer: \"Go to Settings > Data & Privacy > Export Your Data to download all your expense data in CSV format.\"\n  },\n  {\n    question: \"Is my data secure?\",\n    answer: \"Yes! We use bank-level encryption to protect your data. You can control your privacy settings in Settings > Privacy Settings.\"\n  },\n  {\n    question: \"Can I use KudiScan offline?\",\n    answer: \"You can scan receipts offline, but you'll need an internet connection to save them to your account and sync across devices.\"\n  },\n  {\n    question: \"How do I change my budget categories?\",\n    answer: \"Categories are predefined to match common Nigerian spending patterns. Contact support if you need additional categories for your business needs.\"\n  }\n];\n\nexport default function HelpCenter() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [openItems, setOpenItems] = useState<string[]>([]);\n\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  const filteredFaqs = faqs.filter(faq =>\n    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    faq.answer.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const toggleItem = (question: string) => {\n    setOpenItems(prev => \n      prev.includes(question) \n        ? prev.filter(item => item !== question)\n        : [...prev, question]\n    );\n  };\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/settings\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n            <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n              Help Center\n            </h1>\n          </div>\n        </div>\n      </header>\n      \n      <main className=\"pb-20 p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search for help...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-help\"\n            />\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Button\n            variant=\"outline\"\n            className=\"h-auto p-4 justify-start\"\n            onClick={() => setLocation(\"/contact-support\")}\n            data-testid=\"button-contact-support\"\n          >\n            <MessageCircle className=\"w-6 h-6 mr-3 text-primary\" />\n            <div className=\"text-left\">\n              <p className=\"font-medium\">Contact Support</p>\n              <p className=\"text-sm text-muted-foreground\">Get direct help from our team</p>\n            </div>\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            className=\"h-auto p-4 justify-start\"\n            onClick={() => window.open(\"mailto:support@kudiscan.com\", \"_blank\")}\n            data-testid=\"button-email-support\"\n          >\n            <Mail className=\"w-6 h-6 mr-3 text-primary\" />\n            <div className=\"text-left\">\n              <p className=\"font-medium\">Email Support</p>\n              <p className=\"text-sm text-muted-foreground\">support@kudiscan.com</p>\n            </div>\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            className=\"h-auto p-4 justify-start\"\n            onClick={() => window.open(\"tel:+2349012345678\", \"_blank\")}\n            data-testid=\"button-phone-support\"\n          >\n            <Phone className=\"w-6 h-6 mr-3 text-primary\" />\n            <div className=\"text-left\">\n              <p className=\"font-medium\">Phone Support</p>\n              <p className=\"text-sm text-muted-foreground\">+234 901 234 5678</p>\n            </div>\n          </Button>\n        </div>\n\n        {/* FAQs */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <HelpCircle className=\"w-5 h-5 mr-2 text-primary\" />\n              Frequently Asked Questions\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {filteredFaqs.map((faq, index) => (\n              <Collapsible key={index}>\n                <CollapsibleTrigger\n                  className=\"flex items-center justify-between w-full p-4 text-left hover:bg-muted rounded-lg transition-colors\"\n                  onClick={() => toggleItem(faq.question)}\n                  data-testid={`faq-question-${index}`}\n                >\n                  <span className=\"font-medium\">{faq.question}</span>\n                  <ChevronDown \n                    className={`w-5 h-5 transition-transform ${\n                      openItems.includes(faq.question) ? 'rotate-180' : ''\n                    }`} \n                  />\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"px-4 pb-4\">\n                  <p className=\"text-muted-foreground leading-relaxed\">{faq.answer}</p>\n                </CollapsibleContent>\n              </Collapsible>\n            ))}\n          </CardContent>\n        </Card>\n\n        {filteredFaqs.length === 0 && (\n          <div className=\"text-center py-8\">\n            <HelpCircle className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No matching help articles found.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Try different search terms or contact support directly.</p>\n          </div>\n        )}\n        </div>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":7671},"MVP_READINESS_CHECKLIST.md":{"content":"# KudiScan MVP Market Readiness Checklist\n\n## ✅ COMPLETED FEATURES\n\n### Core Functionality\n- [x] **Enhanced OCR Receipt Scanning**\n  - Advanced image preprocessing with grayscale conversion and binary thresholding\n  - Multi-pass recognition with confidence scoring\n  - Nigerian-specific merchant database and patterns\n  - Naira currency support and formatting\n  - Smart item extraction and validation\n\n- [x] **User Authentication & Management**\n  - Replit OAuth integration\n  - User profile management\n  - Role-based access control (admin/user)\n\n- [x] **Subscription System**\n  - Freemium tier (10 scans/month)\n  - Premium monthly (₦3,000/month)\n  - Premium yearly (₦28,800/year) \n  - Paystack payment integration optimized for Nigerian market\n  - Scan limit tracking and enforcement\n\n- [x] **Dashboard & Analytics**\n  - Expense tracking with category breakdowns\n  - Monthly/yearly spending analytics\n  - Visual charts and reports\n  - Dark theme with KudiScan green branding\n\n- [x] **Responsive Design**\n  - Mobile-first Nigerian-focused interface\n  - Consistent Montserrat typography\n  - Professional dark theme with green accents\n  - Smooth animations (Expensify-style)\n\n## 🔄 IN PROGRESS / NEEDS COMPLETION\n\n### Critical MVP Requirements\n\n#### 1. **Database Migration** ⚠️ HIGH PRIORITY\n- [ ] Replace in-memory storage with PostgreSQL\n- [ ] Implement proper database schema with Drizzle migrations\n- [ ] Add data persistence for expenses, receipts, and user data\n- [ ] Set up database backups and recovery procedures\n\n#### 2. **Receipt Image Storage** ⚠️ HIGH PRIORITY\n- [ ] Implement secure cloud storage for receipt images\n- [ ] Add image compression and optimization\n- [ ] Create image retrieval and display system\n- [ ] Implement image deletion and cleanup processes\n\n#### 3. **Enhanced OCR Processing** 🔧 MEDIUM PRIORITY\n- [ ] Add batch processing for multiple receipts\n- [ ] Implement OCR result validation and correction interface\n- [ ] Add support for different receipt formats (thermal, A4, mobile photos)\n- [ ] Create OCR confidence threshold settings\n\n#### 4. **Expense Management** 🔧 MEDIUM PRIORITY\n- [ ] Manual expense entry form (for non-receipt expenses)\n- [ ] Expense editing and deletion functionality\n- [ ] Bulk expense operations (import/export CSV)\n- [ ] Recurring expense tracking\n\n#### 5. **Category Management** 🔧 MEDIUM PRIORITY\n- [ ] Custom category creation and editing\n- [ ] Category icons and color customization\n- [ ] Smart auto-categorization based on merchant patterns\n- [ ] Category-based budget limits and alerts\n\n### User Experience Enhancements\n\n#### 6. **Mobile App Features** 📱 HIGH PRIORITY\n- [ ] Camera integration with auto-capture\n- [ ] Offline receipt storage and sync\n- [ ] Push notifications for scan limits and subscription expiry\n- [ ] Biometric authentication (fingerprint/face)\n\n#### 7. **Reporting & Analytics** 📊 MEDIUM PRIORITY\n- [ ] Advanced filtering (date range, category, amount)\n- [ ] Export reports to PDF/Excel\n- [ ] Tax report generation for businesses\n- [ ] Spending trend analysis and predictions\n\n#### 8. **Business Features** 💼 LOW PRIORITY\n- [ ] Multi-user business accounts\n- [ ] Team expense sharing and approval workflows\n- [ ] Integration with Nigerian accounting software\n- [ ] Bulk receipt processing for businesses\n\n### Technical Infrastructure\n\n#### 9. **Performance Optimization** ⚡ HIGH PRIORITY\n- [ ] Implement lazy loading for large expense lists\n- [ ] Add image caching and optimization\n- [ ] Database query optimization and indexing\n- [ ] Reduce bundle size and improve loading times\n\n#### 10. **Security & Compliance** 🔒 HIGH PRIORITY\n- [ ] Data encryption at rest and in transit\n- [ ] GDPR/Nigerian data protection compliance\n- [ ] Security audit and penetration testing\n- [ ] Rate limiting and abuse prevention\n\n#### 11. **Monitoring & Analytics** 📈 MEDIUM PRIORITY\n- [ ] Error tracking and reporting (Sentry integration)\n- [ ] User analytics and behavior tracking\n- [ ] Performance monitoring and alerts\n- [ ] A/B testing framework for feature optimization\n\n### Business Requirements\n\n#### 12. **Payment & Billing** 💳 HIGH PRIORITY\n- [ ] Paystack webhook handling for payment confirmations\n- [ ] Failed payment retry logic and dunning management\n- [ ] Subscription upgrade/downgrade flows\n- [ ] Invoicing and receipt generation for premium users\n\n#### 13. **Customer Support** 🎧 MEDIUM PRIORITY\n- [ ] In-app help center and FAQ\n- [ ] Contact support form and ticket system\n- [ ] User onboarding tutorial and tips\n- [ ] Email notifications for important events\n\n#### 14. **Localization** 🌍 LOW PRIORITY\n- [ ] Support for major Nigerian languages (Yoruba, Igbo, Hausa)\n- [ ] Regional currency preferences\n- [ ] Nigerian business compliance features\n- [ ] Local bank integration for expense tracking\n\n## 🚀 LAUNCH PREPARATION\n\n### Pre-Launch Checklist\n\n#### 15. **Testing & QA** 🧪 HIGH PRIORITY\n- [ ] Comprehensive end-to-end testing\n- [ ] Cross-browser compatibility testing\n- [ ] Mobile device testing (iOS/Android)\n- [ ] Load testing with concurrent users\n- [ ] OCR accuracy testing with various Nigerian receipts\n\n#### 16. **Legal & Compliance** ⚖️ HIGH PRIORITY\n- [ ] Terms of Service and Privacy Policy (Nigerian law compliant)\n- [ ] Data processing agreements\n- [ ] Business registration and tax compliance\n- [ ] App store compliance (Google Play/App Store)\n\n#### 17. **Marketing Preparation** 📢 MEDIUM PRIORITY\n- [ ] Landing page optimization for Nigerian market\n- [ ] SEO optimization for Nigerian search terms\n- [ ] Social media presence setup\n- [ ] Influencer partnership strategy\n- [ ] Beta user feedback collection and testimonials\n\n### Deployment & DevOps\n\n#### 18. **Production Infrastructure** 🏗️ HIGH PRIORITY\n- [ ] Production database setup with backups\n- [ ] CDN setup for image delivery\n- [ ] SSL certificates and domain configuration\n- [ ] Environment variable management\n- [ ] Automated deployment pipeline\n\n#### 19. **Monitoring & Maintenance** 🔧 HIGH PRIORITY\n- [ ] Application monitoring and alerting\n- [ ] Database monitoring and optimization\n- [ ] Backup and disaster recovery procedures\n- [ ] Update and maintenance schedules\n\n## 📊 SUCCESS METRICS\n\n### Key Performance Indicators (KPIs)\n- [ ] **User Acquisition**: Target 1,000 active users in first 3 months\n- [ ] **OCR Accuracy**: Maintain >85% accuracy for Nigerian receipts\n- [ ] **Subscription Conversion**: 15% freemium to premium conversion rate\n- [ ] **User Retention**: 60% monthly active user retention\n- [ ] **Revenue**: ₦500,000 monthly recurring revenue within 6 months\n\n### Technical Metrics\n- [ ] **Performance**: Page load times under 3 seconds\n- [ ] **Uptime**: 99.9% availability\n- [ ] **Mobile Usage**: 80% of users on mobile devices\n- [ ] **Error Rate**: Less than 1% critical errors\n\n## 🎯 IMMEDIATE NEXT STEPS (Week 1-2)\n\n1. **Database Migration** - Move from in-memory to PostgreSQL\n2. **Receipt Image Storage** - Implement secure cloud storage\n3. **OCR Batch Processing** - Handle multiple receipts efficiently\n4. **Mobile Camera Integration** - Core mobile experience\n5. **Payment Webhook Setup** - Ensure reliable subscription billing\n\n## 💡 NICE-TO-HAVE FEATURES (Post-MVP)\n\n- AI-powered expense insights and recommendations\n- Integration with Nigerian banks for automatic expense import\n- Receipt sharing and collaboration features\n- Advanced OCR for handwritten receipts\n- Voice-to-expense entry\n- Expense approval workflows for businesses\n- Integration with Nigerian tax software\n- Multi-currency support for international businesses\n\n---\n\n**MVP Launch Target**: 4-6 weeks from current state\n**Market Focus**: Nigerian SMEs, freelancers, and individual users\n**Primary Differentiator**: Nigerian-optimized OCR with local payment integration","size_bytes":7811},"client/src/pages/expense-categories.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, Trash2, Edit3, Palette } from \"lucide-react\";\nimport * as Icons from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Category } from \"@shared/schema\";\n\n// Category interface comes from shared schema\n\n// Categories are now fetched from the database\n\nconst availableIcons = [\n  \"UtensilsCrossed\", \"Car\", \"Zap\", \"Gamepad2\", \"Heart\", \"ShoppingBag\", \n  \"GraduationCap\", \"MapPin\", \"Home\", \"Briefcase\", \"CreditCard\", \"Gift\",\n  \"Coffee\", \"Fuel\", \"Smartphone\", \"Wifi\", \"Music\", \"Camera\"\n];\n\nconst availableColors = [\n  \"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#96CEB4\", \"#FFEAA7\", \"#DDA0DD\",\n  \"#98D8C8\", \"#F06292\", \"#A8E6CF\", \"#FFB347\", \"#87CEEB\", \"#F0E68C\"\n];\n\nexport default function ExpenseCategories() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [newCategory, setNewCategory] = useState({\n    name: \"\",\n    icon: \"ShoppingBag\",\n    color: \"#FF6B6B\"\n  });\n\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'instant' });\n  }, []);\n\n  // Fetch categories from backend\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"]\n  });\n\n  // Mutations for category management\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: { name: string; icon: string; color: string }) => {\n      return apiRequest(\"/api/categories\", \"POST\", categoryData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setIsAddDialogOpen(false);\n      setNewCategory({ name: \"\", icon: \"ShoppingBag\", color: \"#FF6B6B\" });\n      toast({\n        title: \"Category Added\",\n        description: \"Category has been added successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: { name: string; icon: string; color: string } }) => {\n      return apiRequest(`/api/categories/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setEditingCategory(null);\n      setNewCategory({ name: \"\", icon: \"ShoppingBag\", color: \"#FF6B6B\" });\n      toast({\n        title: \"Category Updated\",\n        description: \"Category has been updated successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/categories/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category Deleted\",\n        description: \"Category has been removed successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAddCategory = () => {\n    if (!newCategory.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Category name is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createCategoryMutation.mutate({\n      name: newCategory.name,\n      icon: newCategory.icon,\n      color: newCategory.color\n    });\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setNewCategory({\n      name: category.name,\n      icon: category.icon,\n      color: category.color\n    });\n  };\n\n  const handleUpdateCategory = () => {\n    if (!editingCategory || !newCategory.name.trim()) return;\n\n    updateCategoryMutation.mutate({\n      id: editingCategory.id,\n      data: {\n        name: newCategory.name,\n        icon: newCategory.icon,\n        color: newCategory.color\n      }\n    });\n  };\n\n  const handleDeleteCategory = (categoryId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this category?\")) {\n      deleteCategoryMutation.mutate(categoryId);\n    }\n  };\n\n  const renderIcon = (iconName: string, color: string) => {\n    const IconComponent = Icons[iconName as keyof typeof Icons] as any;\n    return IconComponent ? <IconComponent className=\"w-6 h-6\" style={{ color }} /> : null;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n        <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n          <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={() => setLocation(\"/settings\")}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n              </Button>\n              <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n                Expense Categories\n              </h1>\n            </div>\n          </div>\n        </header>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <header className=\"bg-background border-b border-border sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 lg:px-6 py-3 max-w-6xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/settings\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-muted-foreground\" />\n            </Button>\n            <h1 className=\"text-xl lg:text-2xl font-bold text-foreground font-display\">\n              Expense Categories\n            </h1>\n          </div>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                data-testid=\"button-add-category\"\n                disabled={createCategoryMutation.isPending}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {createCategoryMutation.isPending ? \"Adding...\" : \"Add Category\"}\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Category</DialogTitle>\n                <DialogDescription>\n                  Create a custom expense category with a name, icon, and color.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"category-name\">Category Name</Label>\n                  <Input\n                    id=\"category-name\"\n                    value={newCategory.name}\n                    onChange={(e) => setNewCategory(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter category name\"\n                    data-testid=\"input-category-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label>Icon</Label>\n                  <div className=\"grid grid-cols-6 gap-2 mt-2\">\n                    {availableIcons.map(iconName => (\n                      <Button\n                        key={iconName}\n                        variant={newCategory.icon === iconName ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"h-12 w-12 p-0\"\n                        onClick={() => setNewCategory(prev => ({ ...prev, icon: iconName }))}\n                        data-testid={`icon-${iconName}`}\n                      >\n                        {renderIcon(iconName, newCategory.color)}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label>Color</Label>\n                  <div className=\"grid grid-cols-6 gap-2 mt-2\">\n                    {availableColors.map(color => (\n                      <Button\n                        key={color}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0 border-2\"\n                        style={{ backgroundColor: color, borderColor: newCategory.color === color ? \"#000\" : color }}\n                        onClick={() => setNewCategory(prev => ({ ...prev, color }))}\n                        data-testid={`color-${color}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleAddCategory} \n                  className=\"w-full\" \n                  data-testid=\"button-save-category\"\n                  disabled={createCategoryMutation.isPending}\n                >\n                  {createCategoryMutation.isPending ? \"Adding...\" : \"Add Category\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n      \n      <main className=\"pb-20 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {categories.map((category) => (\n            <Card key={category.id} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {renderIcon(category.icon, category.color)}\n                    <span>{category.name}</span>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEditCategory(category)}\n                      data-testid={`button-edit-${category.id}`}\n                    >\n                      <Edit3 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteCategory(category.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                      data-testid={`button-delete-${category.id}`}\n                      disabled={deleteCategoryMutation.isPending}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingCategory} onOpenChange={() => setEditingCategory(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Category</DialogTitle>\n              <DialogDescription>\n                Modify the category name, icon, or color.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div>\n                <Label htmlFor=\"edit-category-name\">Category Name</Label>\n                <Input\n                  id=\"edit-category-name\"\n                  value={newCategory.name}\n                  onChange={(e) => setNewCategory(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Enter category name\"\n                  data-testid=\"input-edit-category-name\"\n                />\n              </div>\n              \n              <div>\n                <Label>Icon</Label>\n                <div className=\"grid grid-cols-6 gap-2 mt-2\">\n                  {availableIcons.map(iconName => (\n                    <Button\n                      key={iconName}\n                      variant={newCategory.icon === iconName ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"h-12 w-12 p-0\"\n                      onClick={() => setNewCategory(prev => ({ ...prev, icon: iconName }))}\n                    >\n                      {renderIcon(iconName, newCategory.color)}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <Label>Color</Label>\n                <div className=\"grid grid-cols-6 gap-2 mt-2\">\n                  {availableColors.map(color => (\n                    <Button\n                      key={color}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"h-8 w-8 p-0 border-2\"\n                      style={{ backgroundColor: color, borderColor: newCategory.color === color ? \"#000\" : color }}\n                      onClick={() => setNewCategory(prev => ({ ...prev, color }))}\n                    />\n                  ))}\n                </div>\n              </div>\n              \n              <Button \n                onClick={handleUpdateCategory} \n                className=\"w-full\" \n                data-testid=\"button-update-category\"\n                disabled={updateCategoryMutation.isPending}\n              >\n                {updateCategoryMutation.isPending ? \"Updating...\" : \"Update Category\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":14762},"client/src/components/whatsapp-business.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MessageCircle, Send, ArrowUpRight } from \"lucide-react\";\n\ninterface WhatsAppBusinessProps {\n  trigger?: React.ReactNode;\n}\n\nexport function WhatsAppBusiness({ trigger }: WhatsAppBusinessProps) {\n  const [open, setOpen] = useState(false);\n  const [inquiryType, setInquiryType] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  // KudiScan WhatsApp Business number (replace with actual number)\n  const whatsappNumber = \"+2348000000000\"; // Replace with your WhatsApp Business number\n\n  const inquiryTypes = [\n    { value: \"support\", label: \"Technical Support\" },\n    { value: \"billing\", label: \"Billing & Subscriptions\" },\n    { value: \"feature\", label: \"Feature Request\" },\n    { value: \"partnership\", label: \"Business Partnership\" },\n    { value: \"general\", label: \"General Inquiry\" }\n  ];\n\n  const handleSendWhatsApp = () => {\n    if (!inquiryType || !message.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select an inquiry type and enter your message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Pre-formatted message for WhatsApp\n    const formattedMessage = `Hello KudiScan Team!\n\n*Inquiry Type:* ${inquiryTypes.find(type => type.value === inquiryType)?.label}\n\n*Message:*\n${message.trim()}\n\nThank you for your assistance!`;\n\n    // Create WhatsApp URL with pre-filled message\n    const whatsappUrl = `https://wa.me/${whatsappNumber.replace('+', '')}?text=${encodeURIComponent(formattedMessage)}`;\n\n    // Detect device type for optimal experience\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    if (isMobile) {\n      // On mobile, open WhatsApp directly\n      window.open(whatsappUrl, '_self');\n    } else {\n      // On desktop/tablet, use WhatsApp Web\n      const whatsappWebUrl = `https://web.whatsapp.com/send?phone=${whatsappNumber.replace('+', '')}&text=${encodeURIComponent(formattedMessage)}`;\n      window.open(whatsappWebUrl, '_blank');\n    }\n\n    toast({\n      title: \"Opening WhatsApp\",\n      description: isMobile \n        ? \"Opening WhatsApp app with your message ready to send.\"\n        : \"Opening WhatsApp Web with your message ready to send.\",\n      duration: 3000,\n    });\n\n    // Reset form and close modal after a short delay to prevent redirection issues\n    setTimeout(() => {\n      setInquiryType(\"\");\n      setMessage(\"\");\n      setOpen(false);\n    }, 100);\n  };\n\n  const quickMessages = [\n    {\n      type: \"support\",\n      text: \"Hi! I'm having trouble with receipt scanning. Can you help?\"\n    },\n    {\n      type: \"billing\",\n      text: \"I need help with my subscription plan. Please assist.\"\n    },\n    {\n      type: \"feature\",\n      text: \"I have a suggestion for a new feature that would be helpful.\"\n    }\n  ];\n\n  const handleQuickMessage = (quickMsg: typeof quickMessages[0]) => {\n    setInquiryType(quickMsg.type);\n    setMessage(quickMsg.text);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild data-testid=\"whatsapp-trigger\">\n        {trigger || (\n          <Button className=\"gap-2\" style={{ backgroundColor: '#25D366' }}>\n            <MessageCircle className=\"w-4 h-4\" />\n            Chat on WhatsApp\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"w-[95vw] max-w-[425px] max-h-[85vh] overflow-y-auto overflow-x-hidden bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 mx-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-gray-900 dark:text-white flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" style={{ color: '#25D366' }} />\n            Contact via WhatsApp\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-600 dark:text-gray-400\">\n            Send us a message on WhatsApp. We typically respond within a few hours.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4 w-full min-w-0\">\n          {/* Quick Message Options */}\n          <div className=\"space-y-2 w-full\">\n            <Label className=\"text-gray-900 dark:text-white text-sm font-medium\">\n              Quick Messages\n            </Label>\n            <div className=\"grid gap-2 w-full\">\n              {quickMessages.map((quickMsg, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"text-left justify-start h-auto p-3 text-sm w-full whitespace-normal\"\n                  onClick={() => handleQuickMessage(quickMsg)}\n                  data-testid={`quick-message-${quickMsg.type}`}\n                >\n                  <div className=\"flex flex-col items-start w-full min-w-0\">\n                    <span className=\"font-medium text-left break-words\">{inquiryTypes.find(t => t.value === quickMsg.type)?.label}</span>\n                    <span className=\"text-gray-500 text-xs text-left break-words\">{quickMsg.text}</span>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Inquiry Type */}\n          <div className=\"space-y-2 w-full\">\n            <Label htmlFor=\"inquiry-type\" className=\"text-gray-900 dark:text-white text-sm\">\n              Inquiry Type\n            </Label>\n            <Select value={inquiryType} onValueChange={setInquiryType}>\n              <SelectTrigger className=\"w-full bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm\" data-testid=\"inquiry-type-select\">\n                <SelectValue placeholder=\"Select inquiry type\" />\n              </SelectTrigger>\n              <SelectContent className=\"w-full\">\n                {inquiryTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value} className=\"text-sm\">\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Message */}\n          <div className=\"space-y-2 w-full\">\n            <Label htmlFor=\"message\" className=\"text-gray-900 dark:text-white text-sm\">\n              Your Message\n            </Label>\n            <Textarea\n              id=\"message\"\n              placeholder=\"Describe your inquiry or how we can help you...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              className=\"w-full min-h-[100px] bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white text-sm resize-none\"\n              data-testid=\"whatsapp-message\"\n            />\n          </div>\n\n          {/* WhatsApp Info */}\n          <div className=\"w-full bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800\">\n            <div className=\"flex items-start gap-2 w-full\">\n              <MessageCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" style={{ color: '#25D366' }} />\n              <div className=\"text-sm flex-1 min-w-0\">\n                <p className=\"font-medium text-green-800 dark:text-green-200\">WhatsApp Business</p>\n                <p className=\"text-green-700 dark:text-green-300 text-xs break-words\">\n                  Opens WhatsApp app on mobile or WhatsApp Web on desktop with your message pre-filled. \n                  Our team typically responds within 2-4 hours during business hours (9 AM - 6 PM WAT).\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4 w-full\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setOpen(false)}\n            className=\"text-sm\"\n            data-testid=\"whatsapp-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSendWhatsApp}\n            disabled={!inquiryType || !message.trim()}\n            className=\"gap-2 text-sm whitespace-nowrap\"\n            style={{ backgroundColor: '#25D366' }}\n            data-testid=\"whatsapp-send\"\n          >\n            <Send className=\"w-4 h-4\" />\n            Open WhatsApp\n            <ArrowUpRight className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8743},"client/src/pages/manual-entry.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Trash2, Save, ArrowLeft, Edit3 } from \"lucide-react\";\nimport { formatNaira, parseAmount } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Form validation schema\nconst expenseSchema = z.object({\n  merchant: z.string().min(1, \"Merchant name is required\"),\n  categoryId: z.string().min(1, \"Please select a category\"),\n  amount: z.string().min(1, \"Amount is required\").refine(\n    (val) => {\n      const cleanVal = val.replace(/[₦,\\s]/g, '');\n      return parseFloat(cleanVal) > 0;\n    },\n    \"Amount must be greater than 0\"\n  ),\n  date: z.string().min(1, \"Date is required\"),\n  notes: z.string().optional()\n});\n\nconst itemSchema = z.object({\n  name: z.string().min(1, \"Item name is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  price: z.string().min(1, \"Price is required\").refine(\n    (val) => parseAmount(val) > 0,\n    \"Price must be greater than 0\"\n  )\n});\n\ninterface ExpenseItem {\n  name: string;\n  quantity: number;\n  price: string;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n}\n\nexport default function ManualEntry() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [items, setItems] = useState<ExpenseItem[]>([\n    { name: \"\", quantity: 1, price: \"\" }\n  ]);\n  \n  // Scroll to top when component mounts\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories']\n  });\n\n  // Form setup\n  const form = useForm({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      merchant: \"\",\n      categoryId: \"\",\n      amount: \"\",\n      date: new Date().toISOString().split('T')[0], // Today's date\n      notes: \"\"\n    }\n  });\n\n  // Create expense mutation\n  const createExpenseMutation = useMutation({\n    mutationFn: async (expenseData: any) => {\n      const response = await apiRequest('/api/expenses', 'POST', expenseData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });\n      toast({\n        title: \"Success!\",\n        description: \"Manual expense entry saved successfully\"\n      });\n      // Reset form and items\n      form.reset();\n      setItems([{ name: \"\", quantity: 1, price: \"\" }]);\n      // Navigate back to dashboard\n      setLocation('/');\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save expense entry\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Add new item row\n  const addItem = () => {\n    setItems([...items, { name: \"\", quantity: 1, price: \"\" }]);\n  };\n\n  // Remove item row\n  const removeItem = (index: number) => {\n    if (items.length > 1) {\n      setItems(items.filter((_, i) => i !== index));\n    }\n  };\n\n  // Update item field\n  const updateItem = (index: number, field: keyof ExpenseItem, value: string | number) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    setItems(newItems);\n  };\n\n  // Calculate total from items\n  const calculateItemsTotal = () => {\n    return items.reduce((total, item) => {\n      if (item.name && item.price) {\n        const itemPrice = parseAmount(item.price);\n        return total + (itemPrice * item.quantity);\n      }\n      return total;\n    }, 0);\n  };\n\n  // Auto-calculate amount when items change\n  useEffect(() => {\n    const itemsTotal = calculateItemsTotal();\n    if (itemsTotal > 0) {\n      form.setValue('amount', formatNaira(itemsTotal));\n    }\n  }, [items, form]);\n\n  // Handle form submission\n  const onSubmit = async (data: z.infer<typeof expenseSchema>) => {\n    // Filter out empty items\n    const validItems = items.filter(item => item.name && item.price);\n    \n    // Find the selected category name\n    const selectedCategory = categories.find(cat => cat.id === data.categoryId);\n    \n    // Ensure the date is formatted as YYYY-MM-DD string for database\n    const dateValue = typeof data.date === 'string' ? data.date : data.date.toISOString().split('T')[0];\n    \n    const expenseData = {\n      merchant: data.merchant,\n      category: selectedCategory?.name || \"Uncategorized\",\n      amount: parseAmount(data.amount).toString(), // Convert formatted amount back to decimal string\n      date: dateValue, // Send as YYYY-MM-DD string\n      notes: data.notes || \"\",\n      items: validItems.map(item => \n        `${item.name} (Qty: ${item.quantity}, Price: ${item.price})`\n      )\n    };\n\n    await createExpenseMutation.mutateAsync(expenseData);\n  };\n\n  return (\n    <div className=\"w-full max-w-none md:max-w-4xl lg:max-w-6xl mx-auto bg-background min-h-screen\">\n      <Header title=\"Manual Entry\" />\n      \n      <main className=\"pb-24 px-4 py-4\">\n        <div className=\"max-w-2xl mx-auto\">\n\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              \n              {/* Basic Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Basic Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"merchant\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Merchant Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"e.g., Shoprite, GTBank, Uber, etc.\"\n                            {...field}\n                            data-testid=\"input-merchant\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  <div className=\"flex items-center gap-2\">\n                                    <span>{category.icon}</span>\n                                    <span>{category.name}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"date\"\n                              {...field}\n                              data-testid=\"input-date\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Amount (₦)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"0\"\n                            value={field.value}\n                            onChange={(e) => {\n                              // Simply store the raw input, no formatting during typing\n                              field.onChange(e.target.value);\n                            }}\n                            onBlur={(e) => {\n                              // Format only when user leaves the field\n                              const value = e.target.value.replace(/[^\\d.]/g, '');\n                              if (value && parseFloat(value) > 0) {\n                                field.onChange(formatNaira(parseFloat(value)));\n                              } else if (!value) {\n                                field.onChange('');\n                              }\n                            }}\n                            onFocus={(e) => {\n                              // Remove formatting when user focuses to allow easy editing\n                              const value = parseAmount(e.target.value);\n                              if (value > 0) {\n                                field.onChange(value.toString());\n                              }\n                            }}\n                            data-testid=\"input-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Add any additional notes about this expense...\"\n                            {...field}\n                            data-testid=\"textarea-notes\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Items Details */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle className=\"text-lg\">Item Details (Optional)</CardTitle>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addItem}\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Item\n                  </Button>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {items.map((item, index) => (\n                    <div key={index} className=\"flex gap-2 items-start\">\n                      <div className=\"flex-1 grid grid-cols-1 md:grid-cols-3 gap-2\">\n                        <Input\n                          placeholder=\"Item name\"\n                          value={item.name}\n                          onChange={(e) => updateItem(index, 'name', e.target.value)}\n                          data-testid={`input-item-name-${index}`}\n                        />\n                        <div className=\"grid grid-cols-2 gap-1\">\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Qty\"\n                            min=\"1\"\n                            value={item.quantity}\n                            onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value) || 1)}\n                            data-testid={`input-item-quantity-${index}`}\n                          />\n                          <Input\n                            placeholder=\"₦Price\"\n                            value={item.price}\n                            onChange={(e) => {\n                              // Store raw input during typing\n                              updateItem(index, 'price', e.target.value);\n                            }}\n                            onBlur={(e) => {\n                              // Format when user leaves the field\n                              const value = e.target.value.replace(/[^\\d.]/g, '');\n                              if (value && parseFloat(value) > 0) {\n                                updateItem(index, 'price', formatNaira(parseFloat(value)));\n                              } else if (!value) {\n                                updateItem(index, 'price', '');\n                              }\n                            }}\n                            onFocus={(e) => {\n                              // Remove formatting when user focuses\n                              const value = parseAmount(e.target.value);\n                              if (value > 0) {\n                                updateItem(index, 'price', value.toString());\n                              }\n                            }}\n                            data-testid={`input-item-price-${index}`}\n                          />\n                        </div>\n                      </div>\n                      {items.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeItem(index)}\n                          className=\"text-destructive hover:text-destructive\"\n                          data-testid={`button-remove-item-${index}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  \n                  {calculateItemsTotal() > 0 && (\n                    <div className=\"pt-2 border-t\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Calculated Total:</span>\n                        <span className=\"font-semibold\">₦{calculateItemsTotal().toLocaleString()}</span>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setLocation('/')}\n                  data-testid=\"button-cancel\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={createExpenseMutation.isPending}\n                  data-testid=\"button-save-expense\"\n                >\n                  {createExpenseMutation.isPending ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Expense\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </main>\n      \n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":16985}}}